{"version":3,"file":"runtime_compiler.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/runtime_compiler.ts"],"names":[],"mappings":"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","sourcesContent":["import {ComponentFactory, ComponentResolver, Injectable} from '@angular/core';\n\nimport {BaseException} from '../src/facade/exceptions';\nimport {IS_DART, Type, isBlank, isString} from '../src/facade/lang';\n\nimport {ListWrapper,} from '../src/facade/collection';\nimport {PromiseWrapper} from '../src/facade/async';\nimport {createHostComponentMeta, CompileDirectiveMetadata, CompilePipeMetadata, CompileIdentifierMetadata} from './compile_metadata';\nimport {TemplateAst,} from './template_ast';\nimport {StyleCompiler, StylesCompileDependency, StylesCompileResult} from './style_compiler';\nimport {ViewCompiler} from './view_compiler/view_compiler';\nimport {TemplateParser} from './template_parser';\nimport {DirectiveNormalizer} from './directive_normalizer';\nimport {CompileMetadataResolver} from './metadata_resolver';\nimport {CompilerConfig} from './config';\nimport * as ir from './output/output_ast';\nimport {jitStatements} from './output/output_jit';\nimport {interpretStatements} from './output/output_interpreter';\nimport {InterpretiveAppViewInstanceFactory} from './output/interpretive_view';\nimport {XHR} from './xhr';\nexport class RuntimeCompiler implements ComponentResolver {\n  private _styleCache: Map<string, Promise<string>> = new Map<string, Promise<string>>();\n  private _hostCacheKeys = new Map<Type, any>();\n  private _compiledTemplateCache = new Map<any, CompiledTemplate>();\n  private _compiledTemplateDone = new Map<any, Promise<CompiledTemplate>>();\n\n  constructor(\n      private _metadataResolver: CompileMetadataResolver,\n      private _templateNormalizer: DirectiveNormalizer, private _templateParser: TemplateParser,\n      private _styleCompiler: StyleCompiler, private _viewCompiler: ViewCompiler, private _xhr: XHR,\n      private _genConfig: CompilerConfig) {}\n\n  resolveComponent(component: Type|string): Promise<ComponentFactory<any>> {\n    if (isString(component)) {\n      return PromiseWrapper.reject(\n          new BaseException(`Cannot resolve component using '${component}'.`), null);\n    }\n\n    let componentType = <Type>component;\n    var compMeta: CompileDirectiveMetadata =\n        this._metadataResolver.getDirectiveMetadata(componentType);\n    var hostCacheKey = this._hostCacheKeys.get(componentType);\n    if (isBlank(hostCacheKey)) {\n      hostCacheKey = new Object();\n      this._hostCacheKeys.set(componentType, hostCacheKey);\n      assertComponent(compMeta);\n      var hostMeta: CompileDirectiveMetadata =\n          createHostComponentMeta(compMeta.type, compMeta.selector);\n\n      this._loadAndCompileComponent(hostCacheKey, hostMeta, [compMeta], [], []);\n    }\n    return this._compiledTemplateDone.get(hostCacheKey)\n        .then(\n            (compiledTemplate: CompiledTemplate) => new ComponentFactory(\n                compMeta.selector, compiledTemplate.viewFactory, componentType));\n  }\n\n  clearCache(): void {\n    this._styleCache.clear();\n    this._compiledTemplateCache.clear();\n    this._compiledTemplateDone.clear();\n    this._hostCacheKeys.clear();\n  }\n\n\n  private _loadAndCompileComponent(\n      cacheKey: any, compMeta: CompileDirectiveMetadata, viewDirectives: CompileDirectiveMetadata[],\n      pipes: CompilePipeMetadata[], compilingComponentsPath: any[]): CompiledTemplate {\n    var compiledTemplate = this._compiledTemplateCache.get(cacheKey);\n    var done = this._compiledTemplateDone.get(cacheKey);\n    if (isBlank(compiledTemplate)) {\n      compiledTemplate = new CompiledTemplate();\n      this._compiledTemplateCache.set(cacheKey, compiledTemplate);\n      done =\n          PromiseWrapper\n              .all([<any>this._compileComponentStyles(compMeta)].concat(viewDirectives.map(\n                  dirMeta => this._templateNormalizer.normalizeDirective(dirMeta))))\n              .then((stylesAndNormalizedViewDirMetas: any[]) => {\n                var normalizedViewDirMetas = stylesAndNormalizedViewDirMetas.slice(1);\n                var styles = stylesAndNormalizedViewDirMetas[0];\n                var parsedTemplate = this._templateParser.parse(\n                    compMeta, compMeta.template.template, normalizedViewDirMetas, pipes,\n                    compMeta.type.name);\n\n                var childPromises: Promise<any>[] = [];\n                compiledTemplate.init(this._compileComponent(\n                    compMeta, parsedTemplate, styles, pipes, compilingComponentsPath,\n                    childPromises));\n                return PromiseWrapper.all(childPromises).then((_) => { return compiledTemplate; });\n              });\n      this._compiledTemplateDone.set(cacheKey, done);\n    }\n    return compiledTemplate;\n  }\n\n  private _compileComponent(\n      compMeta: CompileDirectiveMetadata, parsedTemplate: TemplateAst[], styles: string[],\n      pipes: CompilePipeMetadata[], compilingComponentsPath: any[],\n      childPromises: Promise<any>[]): Function {\n    var compileResult = this._viewCompiler.compileComponent(\n        compMeta, parsedTemplate,\n        new ir.ExternalExpr(new CompileIdentifierMetadata({runtime: styles})), pipes);\n    compileResult.dependencies.forEach((dep) => {\n      var childCompilingComponentsPath = ListWrapper.clone(compilingComponentsPath);\n\n      var childCacheKey = dep.comp.type.runtime;\n      var childViewDirectives: CompileDirectiveMetadata[] =\n          this._metadataResolver.getViewDirectivesMetadata(dep.comp.type.runtime);\n      var childViewPipes: CompilePipeMetadata[] =\n          this._metadataResolver.getViewPipesMetadata(dep.comp.type.runtime);\n      var childIsRecursive = ListWrapper.contains(childCompilingComponentsPath, childCacheKey);\n      childCompilingComponentsPath.push(childCacheKey);\n\n      var childComp = this._loadAndCompileComponent(\n          dep.comp.type.runtime, dep.comp, childViewDirectives, childViewPipes,\n          childCompilingComponentsPath);\n      dep.factoryPlaceholder.runtime = childComp.proxyViewFactory;\n      dep.factoryPlaceholder.name = `viewFactory_${dep.comp.type.name}`;\n      if (!childIsRecursive) {\n        // Only wait for a child if it is not a cycle\n        childPromises.push(this._compiledTemplateDone.get(childCacheKey));\n      }\n    });\n    var factory: any;\n    if (IS_DART || !this._genConfig.useJit) {\n      factory = interpretStatements(\n          compileResult.statements, compileResult.viewFactoryVar,\n          new InterpretiveAppViewInstanceFactory());\n    } else {\n      factory = jitStatements(\n          `${compMeta.type.name}.template.js`, compileResult.statements,\n          compileResult.viewFactoryVar);\n    }\n    return factory;\n  }\n\n  private _compileComponentStyles(compMeta: CompileDirectiveMetadata): Promise<string[]> {\n    var compileResult = this._styleCompiler.compileComponent(compMeta);\n    return this._resolveStylesCompileResult(compMeta.type.name, compileResult);\n  }\n\n  private _resolveStylesCompileResult(sourceUrl: string, result: StylesCompileResult):\n      Promise<string[]> {\n    var promises = result.dependencies.map((dep) => this._loadStylesheetDep(dep));\n    return PromiseWrapper.all(promises)\n        .then((cssTexts) => {\n          var nestedCompileResultPromises: Promise<string[]>[] = [];\n          for (var i = 0; i < result.dependencies.length; i++) {\n            var dep = result.dependencies[i];\n            var cssText = cssTexts[i];\n            var nestedCompileResult =\n                this._styleCompiler.compileStylesheet(dep.moduleUrl, cssText, dep.isShimmed);\n            nestedCompileResultPromises.push(\n                this._resolveStylesCompileResult(dep.moduleUrl, nestedCompileResult));\n          }\n          return PromiseWrapper.all(nestedCompileResultPromises);\n        })\n        .then((nestedStylesArr) => {\n          for (var i = 0; i < result.dependencies.length; i++) {\n            var dep = result.dependencies[i];\n            dep.valuePlaceholder.runtime = nestedStylesArr[i];\n            dep.valuePlaceholder.name = `importedStyles${i}`;\n          }\n          if (IS_DART || !this._genConfig.useJit) {\n            return interpretStatements(\n                result.statements, result.stylesVar, new InterpretiveAppViewInstanceFactory());\n          } else {\n            return jitStatements(`${sourceUrl}.css.js`, result.statements, result.stylesVar);\n          }\n        });\n  }\n\n  private _loadStylesheetDep(dep: StylesCompileDependency): Promise<string> {\n    var cacheKey = `${dep.moduleUrl}${dep.isShimmed ? '.shim' : ''}`;\n    var cssTextPromise = this._styleCache.get(cacheKey);\n    if (isBlank(cssTextPromise)) {\n      cssTextPromise = this._xhr.get(dep.moduleUrl);\n      this._styleCache.set(cacheKey, cssTextPromise);\n    }\n    return cssTextPromise;\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: CompileMetadataResolver, },\n{type: DirectiveNormalizer, },\n{type: TemplateParser, },\n{type: StyleCompiler, },\n{type: ViewCompiler, },\n{type: XHR, },\n{type: CompilerConfig, },\n];\n}\n\nclass CompiledTemplate {\n  viewFactory: Function = null;\n  proxyViewFactory: Function;\n  constructor() {\n    this.proxyViewFactory =\n        (viewUtils: any /** TODO #9100 */, childInjector: any /** TODO #9100 */,\n         contextEl: any /** TODO #9100 */) => this.viewFactory(viewUtils, childInjector, contextEl);\n  }\n\n  init(viewFactory: Function) { this.viewFactory = viewFactory; }\n}\n\nfunction assertComponent(meta: CompileDirectiveMetadata) {\n  if (!meta.isComponent) {\n    throw new BaseException(`Could not compile '${meta.type.name}' because it is not a component.`);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}