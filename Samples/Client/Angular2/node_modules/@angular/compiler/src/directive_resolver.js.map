{"version":3,"file":"directive_resolver.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/directive_resolver.ts"],"names":[],"mappings":";AAAA,qBAA2K,eAAe,CAAC,CAAA;AAE3L,6BAAyC,iBAAiB,CAAC,CAAA;AAC3D,2BAA4C,0BAA0B,CAAC,CAAA;AACvE,2BAA4B,0BAA0B,CAAC,CAAA;AACvD,qBAAyC,oBAAoB,CAAC,CAAA;AAG9D,8BAA8B,IAAS;IACrC,MAAM,CAAC,IAAI,YAAY,wBAAiB,CAAC;AAC3C,CAAC;AACD;IACE,2BAAoB,UAAuC;QAA/C,0BAA+C,GAA/C,qCAA+C;QAAvC,eAAU,GAAV,UAAU,CAA6B;IAAG,CAAC;IAE/D;;OAEG;IACH,mCAAO,GAAP,UAAQ,IAAU;QAChB,IAAI,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,wBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QACxE,EAAE,CAAC,CAAC,gBAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YACvD,EAAE,CAAC,CAAC,gBAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBAC1D,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,gBAAgB,EAAE,IAAI,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC;QAED,MAAM,IAAI,0BAAa,CAAC,sCAAoC,gBAAS,CAAC,IAAI,CAAG,CAAC,CAAC;IACjF,CAAC;IAEO,sDAA0B,GAAlC,UACI,EAAqB,EAAE,gBAAwC,EAC/D,aAAmB;QACrB,IAAI,MAAM,GAAa,EAAE,CAAC;QAC1B,IAAI,OAAO,GAAa,EAAE,CAAC;QAC3B,IAAI,IAAI,GAA4B,EAAE,CAAC;QACvC,IAAI,OAAO,GAAyB,EAAE,CAAC;QAEvC,6BAAgB,CAAC,OAAO,CAAC,gBAAgB,EAAE,UAAC,QAAe,EAAE,QAAgB;YAC3E,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;gBAChB,EAAE,CAAC,CAAC,CAAC,YAAY,oBAAa,CAAC,CAAC,CAAC;oBAC/B,EAAE,CAAC,CAAC,gBAAS,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;wBACrC,MAAM,CAAC,IAAI,CAAI,QAAQ,UAAK,CAAC,CAAC,mBAAqB,CAAC,CAAC;oBACvD,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACxB,CAAC;gBACH,CAAC;gBAED,EAAE,CAAC,CAAC,CAAC,YAAY,qBAAc,CAAC,CAAC,CAAC;oBAChC,EAAE,CAAC,CAAC,gBAAS,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;wBACrC,OAAO,CAAC,IAAI,CAAI,QAAQ,UAAK,CAAC,CAAC,mBAAqB,CAAC,CAAC;oBACxD,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACzB,CAAC;gBACH,CAAC;gBAED,EAAE,CAAC,CAAC,CAAC,YAAY,0BAAmB,CAAC,CAAC,CAAC;oBACrC,EAAE,CAAC,CAAC,gBAAS,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;wBAClC,IAAI,CAAC,OAAI,CAAC,CAAC,gBAAgB,OAAG,CAAC,GAAG,QAAQ,CAAC;oBAC7C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,IAAI,CAAC,OAAI,QAAQ,OAAG,CAAC,GAAG,QAAQ,CAAC;oBACnC,CAAC;gBACH,CAAC;gBAED,EAAE,CAAC,CAAC,CAAC,YAAY,2BAAoB,CAAC,CAAC,CAAC;oBACtC,IAAI,IAAI,GAAG,gBAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,CAAC,IAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;oBAC/D,IAAI,CAAC,OAAI,CAAC,CAAC,SAAS,OAAG,CAAC,GAAM,QAAQ,SAAI,IAAI,MAAG,CAAC;gBACpD,CAAC;gBAED,EAAE,CAAC,CAAC,CAAC,YAAY,oBAAa,CAAC,CAAC,CAAC;oBAC/B,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACxB,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;IACxE,CAAC;IAEO,kCAAM,GAAd,UACI,EAAqB,EAAE,MAAgB,EAAE,OAAiB,EAAE,IAA6B,EACzF,OAA6B,EAAE,aAAmB;QACpD,IAAI,YAAY,GAAG,gBAAS,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,wBAAW,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,MAAM,CAAC;QAEzF,IAAI,aAAkB,CAAmB;QACzC,EAAE,CAAC,CAAC,gBAAS,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC1B,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,QAAgB;gBAClC,EAAE,CAAC,CAAC,wBAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC5C,MAAM,IAAI,0BAAa,CACnB,mBAAiB,QAAQ,qCAAgC,gBAAS,CAAC,aAAa,CAAC,MAAG,CAAC,CAAC;gBAC5F,CAAC;YACH,CAAC,CAAC,CAAC;YACH,aAAa,GAAG,wBAAW,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC1D,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,aAAa,GAAG,OAAO,CAAC;QAC1B,CAAC;QAED,IAAI,UAAU,GAAG,gBAAS,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,6BAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC;QACnF,IAAI,aAAa,GACb,gBAAS,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,6BAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC;QAElF,EAAE,CAAC,CAAC,EAAE,YAAY,wBAAiB,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,IAAI,wBAAiB,CAAC;gBAC3B,QAAQ,EAAE,EAAE,CAAC,QAAQ;gBACrB,MAAM,EAAE,YAAY;gBACpB,OAAO,EAAE,aAAa;gBACtB,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,EAAE,CAAC,QAAQ;gBACrB,QAAQ,EAAE,EAAE,CAAC,QAAQ;gBACrB,OAAO,EAAE,aAAa;gBACtB,eAAe,EAAE,EAAE,CAAC,eAAe;gBACnC,SAAS,EAAE,EAAE,CAAC,SAAS;gBACvB,aAAa,EAAE,EAAE,CAAC,aAAa;aAChC,CAAC,CAAC;QAEL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,wBAAiB,CAAC;gBAC3B,QAAQ,EAAE,EAAE,CAAC,QAAQ;gBACrB,MAAM,EAAE,YAAY;gBACpB,OAAO,EAAE,aAAa;gBACtB,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,EAAE,CAAC,QAAQ;gBACrB,OAAO,EAAE,aAAa;gBACtB,SAAS,EAAE,EAAE,CAAC,SAAS;aACxB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IACH,kBAAkB;IACX,4BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,gCAAc,GAA2D;QAChF,EAAC,IAAI,EAAE,8BAAe,GAAG;KACxB,CAAC;IACF,wBAAC;AAAD,CAAC,AA1HD,IA0HC;AA1HY,yBAAiB,oBA0H7B,CAAA;AAEU,kCAA0B,GAAG,IAAI,iBAAiB,CAAC,wBAAS,CAAC,CAAC","sourcesContent":["import {ComponentMetadata, DirectiveMetadata, HostBindingMetadata, HostListenerMetadata, Injectable, InputMetadata, OutputMetadata, QueryMetadata, resolveForwardRef} from '@angular/core';\n\nimport {ReflectorReader, reflector} from '../core_private';\nimport {ListWrapper, StringMapWrapper} from '../src/facade/collection';\nimport {BaseException} from '../src/facade/exceptions';\nimport {Type, isPresent, stringify} from '../src/facade/lang';\n\n\nfunction _isDirectiveMetadata(type: any): boolean {\n  return type instanceof DirectiveMetadata;\n}\nexport class DirectiveResolver {\n  constructor(private _reflector: ReflectorReader = reflector) {}\n\n  /**\n   * Return {@link DirectiveMetadata} for a given `Type`.\n   */\n  resolve(type: Type): DirectiveMetadata {\n    var typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n    if (isPresent(typeMetadata)) {\n      var metadata = typeMetadata.find(_isDirectiveMetadata);\n      if (isPresent(metadata)) {\n        var propertyMetadata = this._reflector.propMetadata(type);\n        return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);\n      }\n    }\n\n    throw new BaseException(`No Directive annotation found on ${stringify(type)}`);\n  }\n\n  private _mergeWithPropertyMetadata(\n      dm: DirectiveMetadata, propertyMetadata: {[key: string]: any[]},\n      directiveType: Type): DirectiveMetadata {\n    var inputs: string[] = [];\n    var outputs: string[] = [];\n    var host: {[key: string]: string} = {};\n    var queries: {[key: string]: any} = {};\n\n    StringMapWrapper.forEach(propertyMetadata, (metadata: any[], propName: string) => {\n      metadata.forEach(a => {\n        if (a instanceof InputMetadata) {\n          if (isPresent(a.bindingPropertyName)) {\n            inputs.push(`${propName}: ${a.bindingPropertyName}`);\n          } else {\n            inputs.push(propName);\n          }\n        }\n\n        if (a instanceof OutputMetadata) {\n          if (isPresent(a.bindingPropertyName)) {\n            outputs.push(`${propName}: ${a.bindingPropertyName}`);\n          } else {\n            outputs.push(propName);\n          }\n        }\n\n        if (a instanceof HostBindingMetadata) {\n          if (isPresent(a.hostPropertyName)) {\n            host[`[${a.hostPropertyName}]`] = propName;\n          } else {\n            host[`[${propName}]`] = propName;\n          }\n        }\n\n        if (a instanceof HostListenerMetadata) {\n          var args = isPresent(a.args) ? (<any[]>a.args).join(', ') : '';\n          host[`(${a.eventName})`] = `${propName}(${args})`;\n        }\n\n        if (a instanceof QueryMetadata) {\n          queries[propName] = a;\n        }\n      });\n    });\n    return this._merge(dm, inputs, outputs, host, queries, directiveType);\n  }\n\n  private _merge(\n      dm: DirectiveMetadata, inputs: string[], outputs: string[], host: {[key: string]: string},\n      queries: {[key: string]: any}, directiveType: Type): DirectiveMetadata {\n    var mergedInputs = isPresent(dm.inputs) ? ListWrapper.concat(dm.inputs, inputs) : inputs;\n\n    var mergedOutputs: any /** TODO #9100 */;\n    if (isPresent(dm.outputs)) {\n      dm.outputs.forEach((propName: string) => {\n        if (ListWrapper.contains(outputs, propName)) {\n          throw new BaseException(\n              `Output event '${propName}' defined multiple times in '${stringify(directiveType)}'`);\n        }\n      });\n      mergedOutputs = ListWrapper.concat(dm.outputs, outputs);\n    } else {\n      mergedOutputs = outputs;\n    }\n\n    var mergedHost = isPresent(dm.host) ? StringMapWrapper.merge(dm.host, host) : host;\n    var mergedQueries =\n        isPresent(dm.queries) ? StringMapWrapper.merge(dm.queries, queries) : queries;\n\n    if (dm instanceof ComponentMetadata) {\n      return new ComponentMetadata({\n        selector: dm.selector,\n        inputs: mergedInputs,\n        outputs: mergedOutputs,\n        host: mergedHost,\n        exportAs: dm.exportAs,\n        moduleId: dm.moduleId,\n        queries: mergedQueries,\n        changeDetection: dm.changeDetection,\n        providers: dm.providers,\n        viewProviders: dm.viewProviders\n      });\n\n    } else {\n      return new DirectiveMetadata({\n        selector: dm.selector,\n        inputs: mergedInputs,\n        outputs: mergedOutputs,\n        host: mergedHost,\n        exportAs: dm.exportAs,\n        queries: mergedQueries,\n        providers: dm.providers\n      });\n    }\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ReflectorReader, },\n];\n}\n\nexport var CODEGEN_DIRECTIVE_RESOLVER = new DirectiveResolver(reflector);\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}