{"version":3,"file":"view_compiler.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/view_compiler/view_compiler.ts"],"names":[],"mappings":"OAAO,EAAC,UAAU,EAAC,MAAM,eAAe;OAEjC,EAAC,iBAAiB,EAAC,MAAM,iCAAiC;OAE1D,EAAC,cAAc,EAAC,MAAM,WAAW;OAIjC,EAAC,cAAc,EAAC,MAAM,mBAAmB;OACzC,EAAC,WAAW,EAAC,MAAM,gBAAgB;OACnC,EAAC,QAAQ,EAAC,MAAM,eAAe;OAC/B,EAAwB,SAAS,EAAE,UAAU,EAAC,MAAM,gBAAgB;AAE3E;IACE,YACW,UAAyB,EAAS,cAAsB,EACxD,YAAqC;QADrC,eAAU,GAAV,UAAU,CAAe;QAAS,mBAAc,GAAd,cAAc,CAAQ;QACxD,iBAAY,GAAZ,YAAY,CAAyB;IAAG,CAAC;AACtD,CAAC;AACD;IAEE,YAAoB,UAA0B;QAA1B,eAAU,GAAV,UAAU,CAAgB;QADtC,uBAAkB,GAAG,IAAI,iBAAiB,EAAE,CAAC;IACJ,CAAC;IAElD,gBAAgB,CACZ,SAAmC,EAAE,QAAuB,EAAE,MAAoB,EAClF,KAA4B;QAC9B,IAAI,YAAY,GAA4B,EAAE,CAAC;QAC/C,IAAI,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;QAC7E,IAAI,UAAU,GAA4B,EAAE,CAAC;QAC7C,kBAAkB,CAAC,GAAG,CAAC,KAAK;YAC1B,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;YAC1C,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QACH,IAAI,IAAI,GAAG,IAAI,WAAW,CACtB,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,kBAAkB,EAAE,CAAC,EAChE,cAAc,CAAC,UAAU,EAAE,EAAE,EAAE,CAAC,CAAC;QACrC,SAAS,CAAC,IAAI,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;QACxC,gEAAgE;QAChE,iDAAiD;QACjD,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACzB,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAE7B,MAAM,CAAC,IAAI,iBAAiB,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAChF,CAAC;AASH,CAAC;AARD,kBAAkB;AACX,uBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,2BAAc,GAA2D;IAChF,EAAC,IAAI,EAAE,cAAc,GAAG;CACvB,CACA","sourcesContent":["import {Injectable} from '@angular/core';\n\nimport {AnimationCompiler} from '../animation/animation_compiler';\nimport {CompileDirectiveMetadata, CompilePipeMetadata} from '../compile_metadata';\nimport {CompilerConfig} from '../config';\nimport * as o from '../output/output_ast';\nimport {TemplateAst} from '../template_ast';\n\nimport {CompileElement} from './compile_element';\nimport {CompileView} from './compile_view';\nimport {bindView} from './view_binder';\nimport {ViewCompileDependency, buildView, finishView} from './view_builder';\n\nexport class ViewCompileResult {\n  constructor(\n      public statements: o.Statement[], public viewFactoryVar: string,\n      public dependencies: ViewCompileDependency[]) {}\n}\nexport class ViewCompiler {\n  private _animationCompiler = new AnimationCompiler();\n  constructor(private _genConfig: CompilerConfig) {}\n\n  compileComponent(\n      component: CompileDirectiveMetadata, template: TemplateAst[], styles: o.Expression,\n      pipes: CompilePipeMetadata[]): ViewCompileResult {\n    var dependencies: any[] /** TODO #9100 */ = [];\n    var compiledAnimations = this._animationCompiler.compileComponent(component);\n    var statements: any[] /** TODO #9100 */ = [];\n    compiledAnimations.map(entry => {\n      statements.push(entry.statesMapStatement);\n      statements.push(entry.fnStatement);\n    });\n    var view = new CompileView(\n        component, this._genConfig, pipes, styles, compiledAnimations, 0,\n        CompileElement.createNull(), []);\n    buildView(view, template, dependencies);\n    // Need to separate binding from creation to be able to refer to\n    // variables that have been declared after usage.\n    bindView(view, template);\n    finishView(view, statements);\n\n    return new ViewCompileResult(statements, view.viewFactory.name, dependencies);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: CompilerConfig, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}