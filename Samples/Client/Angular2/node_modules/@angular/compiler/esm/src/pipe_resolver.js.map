{"version":3,"file":"pipe_resolver.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/pipe_resolver.ts"],"names":[],"mappings":"OAAO,EAAC,UAAU,EAAE,YAAY,EAAE,iBAAiB,EAAC,MAAM,eAAe;OAElE,EAAC,eAAe,EAAE,SAAS,EAAC,MAAM,iBAAiB;OACnD,EAAC,aAAa,EAAC,MAAM,0BAA0B;OAC/C,EAAO,SAAS,EAAE,SAAS,EAAC,MAAM,oBAAoB;AAE7D,yBAAyB,IAAS;IAChC,MAAM,CAAC,IAAI,YAAY,YAAY,CAAC;AACtC,CAAC;AACD;IACE,YAAoB,UAAU,GAAoB,SAAS;QAAvC,eAAU,GAAV,UAAU,CAA6B;IAAG,CAAC;IAE/D;;OAEG;IACH,OAAO,CAAC,IAAU;QAChB,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QACjE,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAC7C,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC,UAAU,CAAC;YACpB,CAAC;QACH,CAAC;QACD,MAAM,IAAI,aAAa,CAAC,8BAA8B,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3E,CAAC;AASH,CAAC;AARD,kBAAkB;AACX,uBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,2BAAc,GAA2D;IAChF,EAAC,IAAI,EAAE,eAAe,GAAG;CACxB,CACA","sourcesContent":["import {Injectable, PipeMetadata, resolveForwardRef} from '@angular/core';\n\nimport {ReflectorReader, reflector} from '../core_private';\nimport {BaseException} from '../src/facade/exceptions';\nimport {Type, isPresent, stringify} from '../src/facade/lang';\n\nfunction _isPipeMetadata(type: any): boolean {\n  return type instanceof PipeMetadata;\n}\nexport class PipeResolver {\n  constructor(private _reflector: ReflectorReader = reflector) {}\n\n  /**\n   * Return {@link PipeMetadata} for a given `Type`.\n   */\n  resolve(type: Type): PipeMetadata {\n    var metas = this._reflector.annotations(resolveForwardRef(type));\n    if (isPresent(metas)) {\n      var annotation = metas.find(_isPipeMetadata);\n      if (isPresent(annotation)) {\n        return annotation;\n      }\n    }\n    throw new BaseException(`No Pipe decorator found on ${stringify(type)}`);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ReflectorReader, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}