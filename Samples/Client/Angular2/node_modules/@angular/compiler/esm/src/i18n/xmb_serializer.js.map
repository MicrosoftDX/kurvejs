{"version":3,"file":"xmb_serializer.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/i18n/xmb_serializer.ts"],"names":[],"mappings":"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","sourcesContent":["import {RegExpWrapper, isBlank, isPresent} from '../facade/lang';\nimport {HtmlAst, HtmlElementAst} from '../html_ast';\nimport {HtmlParser} from '../html_parser';\nimport {ParseError, ParseSourceSpan} from '../parse_util';\n\nimport {Message, id} from './message';\n\nlet _PLACEHOLDER_REGEXP = RegExpWrapper.create(`\\\\<ph(\\\\s)+name=(\"(\\\\w)+\")\\\\/\\\\>`);\nconst _ID_ATTR = 'id';\nconst _MSG_ELEMENT = 'msg';\nconst _BUNDLE_ELEMENT = 'message-bundle';\n\nexport function serializeXmb(messages: Message[]): string {\n  let ms = messages.map((m) => _serializeMessage(m)).join('');\n  return `<message-bundle>${ms}</message-bundle>`;\n}\n\nexport class XmbDeserializationResult {\n  constructor(\n      public content: string, public messages: {[key: string]: HtmlAst[]},\n      public errors: ParseError[]) {}\n}\n\nexport class XmbDeserializationError extends ParseError {\n  constructor(span: ParseSourceSpan, msg: string) { super(span, msg); }\n}\n\nexport function deserializeXmb(content: string, url: string): XmbDeserializationResult {\n  let parser = new HtmlParser();\n  let normalizedContent = _expandPlaceholder(content.trim());\n  let parsed = parser.parse(normalizedContent, url);\n\n  if (parsed.errors.length > 0) {\n    return new XmbDeserializationResult(null, {}, parsed.errors);\n  }\n\n  if (_checkRootElement(parsed.rootNodes)) {\n    return new XmbDeserializationResult(\n        null, {}, [new XmbDeserializationError(null, `Missing element \"${_BUNDLE_ELEMENT}\"`)]);\n  }\n\n  let bundleEl = <HtmlElementAst>parsed.rootNodes[0];  // test this\n  let errors: ParseError[] = [];\n  let messages: {[key: string]: HtmlAst[]} = {};\n\n  _createMessages(bundleEl.children, messages, errors);\n\n  return (errors.length == 0) ?\n      new XmbDeserializationResult(normalizedContent, messages, []) :\n      new XmbDeserializationResult(null, <{[key: string]: HtmlAst[]}>{}, errors);\n}\n\nfunction _checkRootElement(nodes: HtmlAst[]): boolean {\n  return nodes.length < 1 || !(nodes[0] instanceof HtmlElementAst) ||\n      (<HtmlElementAst>nodes[0]).name != _BUNDLE_ELEMENT;\n}\n\nfunction _createMessages(\n    nodes: HtmlAst[], messages: {[key: string]: HtmlAst[]}, errors: ParseError[]): void {\n  nodes.forEach((item) => {\n    if (item instanceof HtmlElementAst) {\n      let msg = <HtmlElementAst>item;\n\n      if (msg.name != _MSG_ELEMENT) {\n        errors.push(\n            new XmbDeserializationError(item.sourceSpan, `Unexpected element \"${msg.name}\"`));\n        return;\n      }\n\n      let id = _id(msg);\n      if (isBlank(id)) {\n        errors.push(\n            new XmbDeserializationError(item.sourceSpan, `\"${_ID_ATTR}\" attribute is missing`));\n        return;\n      }\n\n      messages[id] = msg.children;\n    }\n  });\n}\n\nfunction _id(el: HtmlElementAst): string {\n  let ids = el.attrs.filter(a => a.name == _ID_ATTR);\n  return ids.length > 0 ? ids[0].value : null;\n}\n\nfunction _serializeMessage(m: Message): string {\n  const desc = isPresent(m.description) ? ` desc='${_escapeXml(m.description)}'` : '';\n  const meaning = isPresent(m.meaning) ? ` meaning='${_escapeXml(m.meaning)}'` : '';\n  return `<msg id='${id(m)}'${desc}${meaning}>${m.content}</msg>`;\n}\n\nfunction _expandPlaceholder(input: string): string {\n  return RegExpWrapper.replaceAll(_PLACEHOLDER_REGEXP, input, (match: string[]) => {\n    let nameWithQuotes = match[2];\n    return `<ph name=${nameWithQuotes}></ph>`;\n  });\n}\n\nconst _XML_ESCAPED_CHARS: [RegExp, string][] = [\n  [/&/g, '&amp;'],\n  [/\"/g, '&quot;'],\n  [/'/g, '&apos;'],\n  [/</g, '&lt;'],\n  [/>/g, '&gt;'],\n];\n\nfunction _escapeXml(value: string): string {\n  return _XML_ESCAPED_CHARS.reduce((value, escape) => value.replace(escape[0], escape[1]), value);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}