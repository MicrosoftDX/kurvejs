{"version":3,"file":"assertions.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/assertions.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAC,MAAM,eAAe;OAEhC,EAAC,aAAa,EAAC,MAAM,0BAA0B;OAC/C,EAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAC,MAAM,oBAAoB;AAE7D,qCAAqC,UAAkB,EAAE,KAAU;IACjE,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC;IACT,CAAC;IACD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACpB,MAAM,IAAI,aAAa,CAAC,aAAa,UAAU,8BAA8B,CAAC,CAAC;IACjF,CAAC;IACD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;QACzC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,IAAI,aAAa,CAAC,aAAa,UAAU,8BAA8B,CAAC,CAAC;QACjF,CAAC;IACH,CAAC;AACH,CAAC;AAED,MAAM,+BAA+B,GAAG;IACtC,QAAQ;IACR,OAAO;IACP,WAAW;CACZ,CAAC;AAEF,2CAA2C,UAAkB,EAAE,KAAU;IACvE,EAAE,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7E,MAAM,IAAI,aAAa,CAAC,aAAa,UAAU,iCAAiC,CAAC,CAAC;IACpF,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAW,CAAC;QACjC,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAW,CAAC;QAC/B,sBAAsB;QACtB,+BAA+B,CAAC,OAAO,CAAC,MAAM;YAC5C,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3C,MAAM,IAAI,aAAa,CAAC,KAAK,KAAK,OAAO,GAAG,4CAA4C,CAAC,CAAC;YAC5F,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;AACH,CAAC","sourcesContent":["import {isDevMode} from '@angular/core';\n\nimport {BaseException} from '../src/facade/exceptions';\nimport {isArray, isBlank, isString} from '../src/facade/lang';\n\nexport function assertArrayOfStrings(identifier: string, value: any) {\n  if (!isDevMode() || isBlank(value)) {\n    return;\n  }\n  if (!isArray(value)) {\n    throw new BaseException(`Expected '${identifier}' to be an array of strings.`);\n  }\n  for (var i = 0; i < value.length; i += 1) {\n    if (!isString(value[i])) {\n      throw new BaseException(`Expected '${identifier}' to be an array of strings.`);\n    }\n  }\n}\n\nconst INTERPOLATION_BLACKLIST_REGEXPS = [\n  /^\\s*$/g,     // empty\n  /[<>]/g,      // html tag\n  /^[\\{\\}]$/g,  // i18n expansion\n];\n\nexport function assertInterpolationSymbols(identifier: string, value: any): void {\n  if (isDevMode() && !isBlank(value) && (!isArray(value) || value.length != 2)) {\n    throw new BaseException(`Expected '${identifier}' to be an array, [start, end].`);\n  } else if (isDevMode() && !isBlank(value)) {\n    const start = value[0] as string;\n    const end = value[1] as string;\n    // black list checking\n    INTERPOLATION_BLACKLIST_REGEXPS.forEach(regexp => {\n      if (regexp.test(start) || regexp.test(end)) {\n        throw new BaseException(`['${start}', '${end}'] contains unusable interpolation symbol.`);\n      }\n    });\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}