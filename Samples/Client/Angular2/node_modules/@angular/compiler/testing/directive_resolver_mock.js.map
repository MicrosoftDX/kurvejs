{"version":3,"file":"directive_resolver_mock.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/testing/directive_resolver_mock.ts"],"names":[],"mappings":"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","sourcesContent":["import {ComponentMetadata, DirectiveMetadata, Injectable} from '@angular/core';\n\nimport {DirectiveResolver} from '../src/directive_resolver';\nimport {Map} from '../src/facade/collection';\nimport {Type, isPresent} from '../src/facade/lang';\nexport class MockDirectiveResolver extends DirectiveResolver {\n  private _providerOverrides = new Map<Type, any[]>();\n  private viewProviderOverrides = new Map<Type, any[]>();\n\n  resolve(type: Type): DirectiveMetadata {\n    var dm = super.resolve(type);\n\n    var providerOverrides = this._providerOverrides.get(type);\n    var viewProviderOverrides = this.viewProviderOverrides.get(type);\n\n    var providers = dm.providers;\n    if (isPresent(providerOverrides)) {\n      var originalViewProviders: any[] = isPresent(dm.providers) ? dm.providers : [];\n      providers = originalViewProviders.concat(providerOverrides);\n    }\n\n    if (dm instanceof ComponentMetadata) {\n      var viewProviders = dm.viewProviders;\n      if (isPresent(viewProviderOverrides)) {\n        var originalViewProviders: any[] = isPresent(dm.viewProviders) ? dm.viewProviders : [];\n        viewProviders = originalViewProviders.concat(viewProviderOverrides);\n      }\n\n      return new ComponentMetadata({\n        selector: dm.selector,\n        inputs: dm.inputs,\n        outputs: dm.outputs,\n        host: dm.host,\n        exportAs: dm.exportAs,\n        moduleId: dm.moduleId,\n        queries: dm.queries,\n        changeDetection: dm.changeDetection,\n        providers: providers,\n        viewProviders: viewProviders\n      });\n    }\n\n    return new DirectiveMetadata({\n      selector: dm.selector,\n      inputs: dm.inputs,\n      outputs: dm.outputs,\n      host: dm.host,\n      providers: providers,\n      exportAs: dm.exportAs,\n      queries: dm.queries\n    });\n  }\n\n  setProvidersOverride(type: Type, providers: any[]): void {\n    this._providerOverrides.set(type, providers);\n  }\n\n  setViewProvidersOverride(type: Type, viewProviders: any[]): void {\n    this.viewProviderOverrides.set(type, viewProviders);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}