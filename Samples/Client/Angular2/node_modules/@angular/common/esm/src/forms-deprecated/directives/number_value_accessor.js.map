{"version":3,"file":"number_value_accessor.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/common/src/forms-deprecated/directives/number_value_accessor.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAC,MAAM,eAAe;OAElE,EAAC,aAAa,EAAC,MAAM,mBAAmB;OAExC,EAAuB,iBAAiB,EAAC,MAAM,0BAA0B;AAEhF,OAAO,MAAM,qBAAqB,GAAiD;IACjF,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,MAAM,mBAAmB,CAAC;IAClD,KAAK,EAAE,IAAI;CACZ,CAAC;AACF;IAIE,YAAoB,SAAmB,EAAU,WAAuB;QAApD,cAAS,GAAT,SAAS,CAAU;QAAU,gBAAW,GAAX,WAAW,CAAY;QAHxE,aAAQ,GAAG,CAAC,CAAM,OAAM,CAAC,CAAC;QAC1B,cAAS,GAAG,QAAO,CAAC,CAAC;IAEsD,CAAC;IAE5E,UAAU,CAAC,KAAa;QACtB,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACpF,CAAC;IAED,gBAAgB,CAAC,EAAuB;QACtC,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAK,OAAO,EAAE,CAAC,KAAK,IAAI,EAAE,GAAG,IAAI,GAAG,aAAa,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3F,CAAC;IACD,iBAAiB,CAAC,EAAc,IAAU,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC;AAmBlE,CAAC;AAlBD,kBAAkB;AACX,8BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EACJ,6FAA6F;gBACjG,IAAI,EAAE;oBACJ,UAAU,EAAE,+BAA+B;oBAC3C,SAAS,EAAE,+BAA+B;oBAC1C,QAAQ,EAAE,aAAa;iBACxB;gBACD,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACnC,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,kCAAc,GAA2D;IAChF,EAAC,IAAI,EAAE,QAAQ,GAAG;IAClB,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,CACA","sourcesContent":["import {Directive, ElementRef, Renderer, forwardRef} from '@angular/core';\n\nimport {NumberWrapper} from '../../facade/lang';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nexport const NUMBER_VALUE_ACCESSOR: any = /*@ts2dart_const*/ /*@ts2dart_Provider*/ {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NumberValueAccessor),\n  multi: true\n};\nexport class NumberValueAccessor implements ControlValueAccessor {\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor(private _renderer: Renderer, private _elementRef: ElementRef) {}\n\n  writeValue(value: number): void {\n    this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', value);\n  }\n\n  registerOnChange(fn: (_: number) => void): void {\n    this.onChange = (value) => { fn(value == '' ? null : NumberWrapper.parseFloat(value)); };\n  }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn; }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'input[type=number][ngControl],input[type=number][ngFormControl],input[type=number][ngModel]',\n  host: {\n    '(change)': 'onChange($event.target.value)',\n    '(input)': 'onChange($event.target.value)',\n    '(blur)': 'onTouched()'\n  },\n  providers: [NUMBER_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Renderer, },\n{type: ElementRef, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}