{"version":3,"file":"ng_form.js","sourceRoot":"","sources":["../../../../../../../modules/@angular/common/src/forms-deprecated/directives/ng_form.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, Inject, Optional, Self, forwardRef} from '@angular/core';\n\nimport {EventEmitter, ObservableWrapper, PromiseWrapper} from '../../facade/async';\nimport {ListWrapper} from '../../facade/collection';\nimport {isPresent} from '../../facade/lang';\nimport {AbstractControl, Control, ControlGroup} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {NgControl} from './ng_control';\nimport {NgControlGroup} from './ng_control_group';\nimport {composeAsyncValidators, composeValidators, setUpControl, setUpControlGroup} from './shared';\n\nexport const formDirectiveProvider: any =\n    /*@ts2dart_const*/ {provide: ControlContainer, useExisting: forwardRef(() => NgForm)};\n\nlet _formWarningDisplayed: boolean = false;\nexport class NgForm extends ControlContainer implements Form {\n  private _submitted: boolean = false;\n\n  form: ControlGroup;\n  ngSubmit = new EventEmitter();\n\n  constructor( validators: any[], asyncValidators: any[]) {\n    super();\n    this._displayWarning();\n    this.form = new ControlGroup(\n        {}, null, composeValidators(validators), composeAsyncValidators(asyncValidators));\n  }\n\n  private _displayWarning() {\n    // TODO(kara): Update this when the new forms module becomes the default\n    if (!_formWarningDisplayed) {\n      _formWarningDisplayed = true;\n      console.warn(`\n      *It looks like you're using the old forms module. This will be opt-in in the next RC, and\n      will eventually be removed in favor of the new forms module. For more information, see:\n      https://docs.google.com/document/u/1/d/1RIezQqE4aEhBRmArIAS1mRIZtWFf6JxN_7B4meyWK0Y/pub\n    `);\n    }\n  }\n\n  get submitted(): boolean { return this._submitted; }\n\n  get formDirective(): Form { return this; }\n\n  get control(): ControlGroup { return this.form; }\n\n  get path(): string[] { return []; }\n\n  get controls(): {[key: string]: AbstractControl} { return this.form.controls; }\n\n  addControl(dir: NgControl): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var container = this._findContainer(dir.path);\n      var ctrl = new Control();\n      setUpControl(ctrl, dir);\n      container.registerControl(dir.name, ctrl);\n      ctrl.updateValueAndValidity({emitEvent: false});\n    });\n  }\n\n  getControl(dir: NgControl): Control { return <Control>this.form.find(dir.path); }\n\n  removeControl(dir: NgControl): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var container = this._findContainer(dir.path);\n      if (isPresent(container)) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n\n  addControlGroup(dir: NgControlGroup): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var container = this._findContainer(dir.path);\n      var group = new ControlGroup({});\n      setUpControlGroup(group, dir);\n      container.registerControl(dir.name, group);\n      group.updateValueAndValidity({emitEvent: false});\n    });\n  }\n\n  removeControlGroup(dir: NgControlGroup): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var container = this._findContainer(dir.path);\n      if (isPresent(container)) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n\n  getControlGroup(dir: NgControlGroup): ControlGroup {\n    return <ControlGroup>this.form.find(dir.path);\n  }\n\n  updateModel(dir: NgControl, value: any): void {\n    PromiseWrapper.scheduleMicrotask(() => {\n      var ctrl = <Control>this.form.find(dir.path);\n      ctrl.updateValue(value);\n    });\n  }\n\n  onSubmit(): boolean {\n    this._submitted = true;\n    ObservableWrapper.callEmit(this.ngSubmit, null);\n    return false;\n  }\n\n  /** @internal */\n  _findContainer(path: string[]): ControlGroup {\n    path.pop();\n    return ListWrapper.isEmpty(path) ? this.form : <ControlGroup>this.form.find(path);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'form:not([ngNoForm]):not([ngFormModel]),ngForm,[ngForm]',\n  providers: [formDirectiveProvider],\n  host: {\n    '(submit)': 'onSubmit()',\n  },\n  outputs: ['ngSubmit'],\n  exportAs: 'ngForm'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}