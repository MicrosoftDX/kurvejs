{"version":3,"file":"replace_pipe.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/pipes/replace_pipe.ts"],"names":[],"mappings":"OAAO,EAAC,IAAI,EAAgB,MAAM,eAAe;OAC1C,EAAC,aAAa,EAAE,aAAa,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAC,MAAM,gBAAgB;OAC7F,EAAC,4BAA4B,EAAC,MAAM,mCAAmC;AAC9E;IACE,SAAS,CAAC,KAAU,EAAE,OAAsB,EAAE,WAA4B;QACxE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,IAAI,4BAA4B,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAC7D,CAAC;QAED,IAAI,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAE7B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,IAAI,4BAA4B,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAC/D,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,IAAI,4BAA4B,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QACnE,CAAC;QAED,EAAE,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC5B,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;YAE/E,MAAM,CAAC,aAAa,CAAC,gBAAgB,CACjC,KAAK,EAAE,UAAU,EAA2B,WAAW,CAAC,CAAC;QAC/D,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,YAAY,MAAM,CAAC,CAAC,CAAC;YAC9B,6BAA6B;YAC7B,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,EAAU,WAAW,CAAC,CAAC;QACvE,CAAC;QAED,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,EAAU,OAAO,EAAU,WAAW,CAAC,CAAC;IAC5E,CAAC;IAEO,eAAe,CAAC,KAAU,IAAa,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEnF,iBAAiB,CAAC,OAAY;QACpC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,OAAO,YAAY,MAAM,CAAC;IACxD,CAAC;IAEO,qBAAqB,CAAC,WAAgB;QAC5C,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;IAC1D,CAAC;AAKH,CAAC;AAJD,kBAAkB;AACX,sBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAC,IAAI,EAAE,SAAS,EAAC,EAAG,EAAE;CAC1C,CACA","sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\nimport {RegExpWrapper, StringWrapper, isBlank, isFunction, isNumber, isString} from '../facade/lang';\nimport {InvalidPipeArgumentException} from './invalid_pipe_argument_exception';\nexport class ReplacePipe implements PipeTransform {\n  transform(value: any, pattern: string|RegExp, replacement: Function|string): any {\n    if (isBlank(value)) {\n      return value;\n    }\n\n    if (!this._supportedInput(value)) {\n      throw new InvalidPipeArgumentException(ReplacePipe, value);\n    }\n\n    var input = value.toString();\n\n    if (!this._supportedPattern(pattern)) {\n      throw new InvalidPipeArgumentException(ReplacePipe, pattern);\n    }\n    if (!this._supportedReplacement(replacement)) {\n      throw new InvalidPipeArgumentException(ReplacePipe, replacement);\n    }\n\n    if (isFunction(replacement)) {\n      const rgxPattern = isString(pattern) ? RegExpWrapper.create(pattern) : pattern;\n\n      return StringWrapper.replaceAllMapped(\n          input, rgxPattern, <(m: string[]) => string>replacement);\n    }\n\n    if (pattern instanceof RegExp) {\n      // use the replaceAll variant\n      return StringWrapper.replaceAll(input, pattern, <string>replacement);\n    }\n\n    return StringWrapper.replace(input, <string>pattern, <string>replacement);\n  }\n\n  private _supportedInput(input: any): boolean { return isString(input) || isNumber(input); }\n\n  private _supportedPattern(pattern: any): boolean {\n    return isString(pattern) || pattern instanceof RegExp;\n  }\n\n  private _supportedReplacement(replacement: any): boolean {\n    return isString(replacement) || isFunction(replacement);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'replace'}, ] },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}