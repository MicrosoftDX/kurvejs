{"version":3,"file":"form_builder.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/forms-deprecated/form_builder.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\n\nimport {StringMapWrapper} from '../facade/collection';\nimport {isArray, isPresent} from '../facade/lang';\n\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport * as modelModule from './model';\nexport class FormBuilder {\n  /**\n   * Construct a new {@link ControlGroup} with the given map of configuration.\n   * Valid keys for the `extra` parameter map are `optionals` and `validator`.\n   *\n   * See the {@link ControlGroup} constructor for more details.\n   */\n  group(controlsConfig: {[key: string]: any}, extra: {[key: string]: any} = null):\n      modelModule.ControlGroup {\n    var controls = this._reduceControls(controlsConfig);\n    var optionals = <{[key: string]: boolean}>(\n        isPresent(extra) ? StringMapWrapper.get(extra, 'optionals') : null);\n    var validator: ValidatorFn = isPresent(extra) ? StringMapWrapper.get(extra, 'validator') : null;\n    var asyncValidator: AsyncValidatorFn =\n        isPresent(extra) ? StringMapWrapper.get(extra, 'asyncValidator') : null;\n    return new modelModule.ControlGroup(controls, optionals, validator, asyncValidator);\n  }\n  /**\n   * Construct a new {@link Control} with the given `value`,`validator`, and `asyncValidator`.\n   */\n  control(value: Object, validator: ValidatorFn = null, asyncValidator: AsyncValidatorFn = null):\n      modelModule.Control {\n    return new modelModule.Control(value, validator, asyncValidator);\n  }\n\n  /**\n   * Construct an array of {@link Control}s from the given `controlsConfig` array of\n   * configuration, with the given optional `validator` and `asyncValidator`.\n   */\n  array(\n      controlsConfig: any[], validator: ValidatorFn = null,\n      asyncValidator: AsyncValidatorFn = null): modelModule.ControlArray {\n    var controls = controlsConfig.map(c => this._createControl(c));\n    return new modelModule.ControlArray(controls, validator, asyncValidator);\n  }\n\n  /** @internal */\n  _reduceControls(controlsConfig: {[k: string]: any}):\n      {[key: string]: modelModule.AbstractControl} {\n    var controls: {[key: string]: modelModule.AbstractControl} = {};\n    StringMapWrapper.forEach(controlsConfig, (controlConfig: any, controlName: string) => {\n      controls[controlName] = this._createControl(controlConfig);\n    });\n    return controls;\n  }\n\n  /** @internal */\n  _createControl(controlConfig: any): modelModule.AbstractControl {\n    if (controlConfig instanceof modelModule.Control ||\n        controlConfig instanceof modelModule.ControlGroup ||\n        controlConfig instanceof modelModule.ControlArray) {\n      return controlConfig;\n\n    } else if (isArray(controlConfig)) {\n      var value = controlConfig[0];\n      var validator: ValidatorFn = controlConfig.length > 1 ? controlConfig[1] : null;\n      var asyncValidator: AsyncValidatorFn = controlConfig.length > 2 ? controlConfig[2] : null;\n      return this.control(value, validator, asyncValidator);\n\n    } else {\n      return this.control(controlConfig);\n    }\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}