{"version":3,"file":"ng_control_name.js","sourceRoot":"","sources":["../../../../../../modules/@angular/common/src/forms-deprecated/directives/ng_control_name.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, Host, Inject, OnChanges, OnDestroy, Optional, Self, SimpleChanges, SkipSelf, forwardRef} from '@angular/core';\n\nimport {EventEmitter, ObservableWrapper} from '../../facade/async';\nimport {Control} from '../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../validators';\n\nimport {ControlContainer} from './control_container';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\nimport {NgControl} from './ng_control';\nimport {composeAsyncValidators, composeValidators, controlPath, isPropertyUpdated, selectValueAccessor} from './shared';\nimport {AsyncValidatorFn, ValidatorFn} from './validators';\n\n\nexport const controlNameBinding: any =\n    /*@ts2dart_const*/ /* @ts2dart_Provider */ {\n      provide: NgControl,\n      useExisting: forwardRef(() => NgControlName)\n    };\nexport class NgControlName extends NgControl implements OnChanges,\n    OnDestroy {\n  /** @internal */\n  update = new EventEmitter();\n  model: any;\n  viewModel: any;\n  private _added = false;\n\n  constructor( private _parent: ControlContainer, private _validators:\n                  /* Array<Validator|Function> */ any[], private _asyncValidators:\n                  /* Array<Validator|Function> */ any[],\n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n\n              ngOnChanges(changes: SimpleChanges) {\n                if (!this._added) {\n                  this.formDirective.addControl(this);\n                  this._added = true;\n                }\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this.viewModel = this.model;\n                  this.formDirective.updateModel(this, this.model);\n                }\n              }\n\n              ngOnDestroy(): void { this.formDirective.removeControl(this); }\n\n              viewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                ObservableWrapper.callEmit(this.update, newValue);\n              }\n\n              get path(): string[] { return controlPath(this.name, this._parent); }\n\n              get formDirective(): any { return this._parent.formDirective; }\n\n              get validator(): ValidatorFn { return composeValidators(this._validators); }\n\n              get asyncValidator(): AsyncValidatorFn {\n                return composeAsyncValidators(this._asyncValidators);\n              }\n\n              get control(): Control { return this.formDirective.getControl(this); }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngControl]',\n  providers: [controlNameBinding],\n  inputs: ['name: ngControl', 'model: ngModel'],\n  outputs: ['update: ngModelChange'],\n  exportAs: 'ngForm'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}