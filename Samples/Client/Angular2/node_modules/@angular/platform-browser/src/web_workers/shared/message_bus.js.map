{"version":3,"file":"message_bus.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-browser/src/web_workers/shared/message_bus.ts"],"names":[],"mappings":";AAKA;;;;;;GAMG;AACH;IAAA;IA8BA,CAAC;IAAD,iBAAC;AAAD,CAAC,AA9BD,IA8BC;AA9BqB,kBAAU,aA8B/B,CAAA","sourcesContent":["import {NgZone} from '@angular/core';\n\nimport {EventEmitter} from '../../facade/async';\n\n\n/**\n * Message Bus is a low level API used to communicate between the UI and the background.\n * Communication is based on a channel abstraction. Messages published in a\n * given channel to one MessageBusSink are received on the same channel\n * by the corresponding MessageBusSource.\n * @experimental\n */\nexport abstract class MessageBus implements MessageBusSource, MessageBusSink {\n  /**\n   * Sets up a new channel on the MessageBus.\n   * MUST be called before calling from or to on the channel.\n   * If runInZone is true then the source will emit events inside the angular zone\n   * and the sink will buffer messages and send only once the zone exits.\n   * if runInZone is false then the source will emit events inside the global zone\n   * and the sink will send messages immediately.\n   */\n  abstract initChannel(channel: string, runInZone?: boolean): void;\n\n  /**\n   * Assigns this bus to the given zone.\n   * Any callbacks attached to channels where runInZone was set to true on initialization\n   * will be executed in the given zone.\n   */\n  abstract attachToZone(zone: NgZone): void;\n\n  /**\n   * Returns an {@link EventEmitter} that emits every time a message\n   * is received on the given channel.\n   */\n  abstract from(channel: string): EventEmitter<any>;\n\n\n  /**\n   * Returns an {@link EventEmitter} for the given channel\n   * To publish methods to that channel just call next (or add in dart) on the returned emitter\n   */\n  abstract to(channel: string): EventEmitter<any>;\n}\n\n/**\n * @experimental\n */\nexport interface MessageBusSource {\n  /**\n   * Sets up a new channel on the MessageBusSource.\n   * MUST be called before calling from on the channel.\n   * If runInZone is true then the source will emit events inside the angular zone.\n   * if runInZone is false then the source will emit events inside the global zone.\n   */\n  initChannel(channel: string, runInZone: boolean): void;\n\n  /**\n   * Assigns this source to the given zone.\n   * Any channels which are initialized with runInZone set to true will emit events that will be\n   * executed within the given zone.\n   */\n  attachToZone(zone: NgZone): void;\n\n  /**\n   * Returns an {@link EventEmitter} that emits every time a message\n   * is received on the given channel.\n   */\n  from(channel: string): EventEmitter<any>;\n}\n\n/**\n * @experimental\n */\nexport interface MessageBusSink {\n  /**\n   * Sets up a new channel on the MessageBusSink.\n   * MUST be called before calling to on the channel.\n   * If runInZone is true the sink will buffer messages and send only once the zone exits.\n   * if runInZone is false the sink will send messages immediatly.\n   */\n  initChannel(channel: string, runInZone: boolean): void;\n\n  /**\n   * Assigns this sink to the given zone.\n   * Any channels which are initialized with runInZone set to true will wait for the given zone\n   * to exit before sending messages.\n   */\n  attachToZone(zone: NgZone): void;\n\n  /**\n   * Returns an {@link EventEmitter} for the given channel\n   * To publish methods to that channel just call next (or add in dart) on the returned emitter\n   */\n  to(channel: string): EventEmitter<any>;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}