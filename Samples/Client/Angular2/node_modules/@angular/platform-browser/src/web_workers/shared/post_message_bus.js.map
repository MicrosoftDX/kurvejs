{"version":3,"file":"post_message_bus.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-browser/src/web_workers/shared/post_message_bus.ts"],"names":[],"mappings":";AAAA,qBAAiC,eAAe,CAAC,CAAA;AAEjD,sBAA8C,oBAAoB,CAAC,CAAA;AACnE,2BAA+B,yBAAyB,CAAC,CAAA;AACzD,2BAA4B,yBAAyB,CAAC,CAAA;AAUtD;IAKE,4BAAoB,kBAAqC;QAArC,uBAAkB,GAAlB,kBAAkB,CAAmB;QAHjD,cAAS,GAA8B,6BAAgB,CAAC,MAAM,EAAE,CAAC;QACjE,mBAAc,GAAkB,EAAE,CAAC;IAEiB,CAAC;IAE7D,yCAAY,GAAZ,UAAa,IAAY;QAAzB,iBAKC;QAJC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;YAC3B,yBAAiB,CAAC,SAAS,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAC,CAAC,IAAO,KAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;IACL,CAAC;IAED,wCAAW,GAAX,UAAY,OAAe,EAAE,SAAyB;QAAtD,iBAgBC;QAhB4B,yBAAyB,GAAzB,gBAAyB;QACpD,EAAE,CAAC,CAAC,6BAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;YACvD,MAAM,IAAI,0BAAa,CAAI,OAAO,kCAA+B,CAAC,CAAC;QACrE,CAAC;QAED,IAAI,OAAO,GAAG,IAAI,oBAAY,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,WAAW,GAAG,IAAI,QAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACnD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC;QACtC,OAAO,CAAC,SAAS,CAAC,UAAC,IAAY;YAC7B,IAAI,OAAO,GAAG,EAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;YAChD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACd,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACpC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAChC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,+BAAE,GAAF,UAAG,OAAe;QAChB,EAAE,CAAC,CAAC,6BAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC;QACzC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,IAAI,0BAAa,CAAI,OAAO,wDAAqD,CAAC,CAAC;QAC3F,CAAC;IACH,CAAC;IAEO,+CAAkB,GAA1B;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACxC,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QAC3B,CAAC;IACH,CAAC;IAEO,0CAAa,GAArB,UAAsB,QAAuB,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnG,yBAAC;AAAD,CAAC,AAhDD,IAgDC;AAhDY,0BAAkB,qBAgD9B,CAAA;AAED;IAIE,8BAAY,WAAyB;QAJvC,iBAoDC;QAlDS,cAAS,GAA8B,6BAAgB,CAAC,MAAM,EAAE,CAAC;QAGvE,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YAChB,WAAW,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAC,EAAgB,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAxB,CAAwB,CAAC,CAAC;QAC1F,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,2FAA2F;YAC3F,IAAM,WAAW,GAAgB,IAAI,CAAC;YACtC,WAAW,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAC,EAAgB,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAxB,CAAwB,CAAC,CAAC;QAC1F,CAAC;IACH,CAAC;IAED,2CAAY,GAAZ,UAAa,IAAY,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;IAEjD,0CAAW,GAAX,UAAY,OAAe,EAAE,SAAyB;QAAzB,yBAAyB,GAAzB,gBAAyB;QACpD,EAAE,CAAC,CAAC,6BAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;YACvD,MAAM,IAAI,0BAAa,CAAI,OAAO,kCAA+B,CAAC,CAAC;QACrE,CAAC;QAED,IAAI,OAAO,GAAG,IAAI,oBAAY,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,WAAW,GAAG,IAAI,QAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACnD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC;IACxC,CAAC;IAED,mCAAI,GAAJ,UAAK,OAAe;QAClB,EAAE,CAAC,CAAC,6BAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC;QACzC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,IAAI,0BAAa,CAAI,OAAO,wDAAqD,CAAC,CAAC;QAC3F,CAAC;IACH,CAAC;IAEO,8CAAe,GAAvB,UAAwB,EAAgB;QACtC,IAAI,QAAQ,GAAG,EAAE,CAAC,IAAI,CAAC;QACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAEO,6CAAc,GAAtB,UAAuB,IAAS;QAC9B,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC3B,EAAE,CAAC,CAAC,6BAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;YACvD,IAAI,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAC1C,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC1B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAQ,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACpE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACzC,CAAC;QACH,CAAC;IACH,CAAC;IACH,2BAAC;AAAD,CAAC,AApDD,IAoDC;AApDY,4BAAoB,uBAoDhC,CAAA;AACD;IACE,wBAAmB,IAAwB,EAAS,MAA4B;QAA7D,SAAI,GAAJ,IAAI,CAAoB;QAAS,WAAM,GAAN,MAAM,CAAsB;IAAG,CAAC;IAEpF,qCAAY,GAAZ,UAAa,IAAY;QACvB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,oCAAW,GAAX,UAAY,OAAe,EAAE,SAAyB;QAAzB,yBAAyB,GAAzB,gBAAyB;QACpD,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAC5C,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAC5C,CAAC;IAED,6BAAI,GAAJ,UAAK,OAAe,IAAuB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAE9E,2BAAE,GAAF,UAAG,OAAe,IAAuB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1E,kBAAkB;IACX,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,6BAAc,GAA2D;QAChF,EAAC,IAAI,EAAE,kBAAkB,GAAG;QAC5B,EAAC,IAAI,EAAE,oBAAoB,GAAG;KAC7B,CAAC;IACF,qBAAC;AAAD,CAAC,AAzBD,IAyBC;AAzBY,sBAAc,iBAyB1B,CAAA;AAED;;;GAGG;AACH;IACE,kBAAmB,OAA0B,EAAS,SAAkB;QAArD,YAAO,GAAP,OAAO,CAAmB;QAAS,cAAS,GAAT,SAAS,CAAS;IAAG,CAAC;IAC9E,eAAC;AAAD,CAAC,AAFD,IAEC","sourcesContent":["import {Injectable, NgZone} from '@angular/core';\n\nimport {EventEmitter, ObservableWrapper} from '../../facade/async';\nimport {StringMapWrapper} from '../../facade/collection';\nimport {BaseException} from '../../facade/exceptions';\n\nimport {MessageBus, MessageBusSink, MessageBusSource} from './message_bus';\n\n\n// TODO(jteplitz602) Replace this with the definition in lib.webworker.d.ts(#3492)\nexport interface PostMessageTarget {\n  postMessage: (message: any, transfer?: [ArrayBuffer]) => void;\n}\n\nexport class PostMessageBusSink implements MessageBusSink {\n  private _zone: NgZone;\n  private _channels: {[key: string]: _Channel} = StringMapWrapper.create();\n  private _messageBuffer: Array<Object> = [];\n\n  constructor(private _postMessageTarget: PostMessageTarget) {}\n\n  attachToZone(zone: NgZone): void {\n    this._zone = zone;\n    this._zone.runOutsideAngular(() => {\n      ObservableWrapper.subscribe(this._zone.onStable, (_) => { this._handleOnEventDone(); });\n    });\n  }\n\n  initChannel(channel: string, runInZone: boolean = true): void {\n    if (StringMapWrapper.contains(this._channels, channel)) {\n      throw new BaseException(`${channel} has already been initialized`);\n    }\n\n    var emitter = new EventEmitter(false);\n    var channelInfo = new _Channel(emitter, runInZone);\n    this._channels[channel] = channelInfo;\n    emitter.subscribe((data: Object) => {\n      var message = {channel: channel, message: data};\n      if (runInZone) {\n        this._messageBuffer.push(message);\n      } else {\n        this._sendMessages([message]);\n      }\n    });\n  }\n\n  to(channel: string): EventEmitter<any> {\n    if (StringMapWrapper.contains(this._channels, channel)) {\n      return this._channels[channel].emitter;\n    } else {\n      throw new BaseException(`${channel} is not set up. Did you forget to call initChannel?`);\n    }\n  }\n\n  private _handleOnEventDone() {\n    if (this._messageBuffer.length > 0) {\n      this._sendMessages(this._messageBuffer);\n      this._messageBuffer = [];\n    }\n  }\n\n  private _sendMessages(messages: Array<Object>) { this._postMessageTarget.postMessage(messages); }\n}\n\nexport class PostMessageBusSource implements MessageBusSource {\n  private _zone: NgZone;\n  private _channels: {[key: string]: _Channel} = StringMapWrapper.create();\n\n  constructor(eventTarget?: EventTarget) {\n    if (eventTarget) {\n      eventTarget.addEventListener('message', (ev: MessageEvent) => this._handleMessages(ev));\n    } else {\n      // if no eventTarget is given we assume we're in a WebWorker and listen on the global scope\n      const workerScope = <EventTarget>self;\n      workerScope.addEventListener('message', (ev: MessageEvent) => this._handleMessages(ev));\n    }\n  }\n\n  attachToZone(zone: NgZone) { this._zone = zone; }\n\n  initChannel(channel: string, runInZone: boolean = true) {\n    if (StringMapWrapper.contains(this._channels, channel)) {\n      throw new BaseException(`${channel} has already been initialized`);\n    }\n\n    var emitter = new EventEmitter(false);\n    var channelInfo = new _Channel(emitter, runInZone);\n    this._channels[channel] = channelInfo;\n  }\n\n  from(channel: string): EventEmitter<any> {\n    if (StringMapWrapper.contains(this._channels, channel)) {\n      return this._channels[channel].emitter;\n    } else {\n      throw new BaseException(`${channel} is not set up. Did you forget to call initChannel?`);\n    }\n  }\n\n  private _handleMessages(ev: MessageEvent): void {\n    var messages = ev.data;\n    for (var i = 0; i < messages.length; i++) {\n      this._handleMessage(messages[i]);\n    }\n  }\n\n  private _handleMessage(data: any): void {\n    var channel = data.channel;\n    if (StringMapWrapper.contains(this._channels, channel)) {\n      var channelInfo = this._channels[channel];\n      if (channelInfo.runInZone) {\n        this._zone.run(() => { channelInfo.emitter.emit(data.message); });\n      } else {\n        channelInfo.emitter.emit(data.message);\n      }\n    }\n  }\n}\nexport class PostMessageBus implements MessageBus {\n  constructor(public sink: PostMessageBusSink, public source: PostMessageBusSource) {}\n\n  attachToZone(zone: NgZone): void {\n    this.source.attachToZone(zone);\n    this.sink.attachToZone(zone);\n  }\n\n  initChannel(channel: string, runInZone: boolean = true): void {\n    this.source.initChannel(channel, runInZone);\n    this.sink.initChannel(channel, runInZone);\n  }\n\n  from(channel: string): EventEmitter<any> { return this.source.from(channel); }\n\n  to(channel: string): EventEmitter<any> { return this.sink.to(channel); }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: PostMessageBusSink, },\n{type: PostMessageBusSource, },\n];\n}\n\n/**\n * Helper class that wraps a channel's {@link EventEmitter} and\n * keeps track of if it should run in the zone.\n */\nclass _Channel {\n  constructor(public emitter: EventEmitter<any>, public runInZone: boolean) {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}