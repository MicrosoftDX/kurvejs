{"version":3,"file":"client_message_broker.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-browser/src/web_workers/shared/client_message_broker.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable, Type} from '@angular/core';\n\nimport {EventEmitter, ObservableWrapper, PromiseCompleter, PromiseWrapper} from '../../facade/async';\nimport {StringMapWrapper} from '../../facade/collection';\nimport {DateWrapper, StringWrapper, isPresent, print, stringify} from '../../facade/lang';\n\nimport {MessageBus} from './message_bus';\nimport {Serializer} from './serializer';\n\n/**\n * @experimental\n */\nexport abstract class ClientMessageBrokerFactory {\n  /**\n   * Initializes the given channel and attaches a new {@link ClientMessageBroker} to it.\n   */\n  abstract createMessageBroker(channel: string, runInZone?: boolean): ClientMessageBroker;\n}\nexport class ClientMessageBrokerFactory_ extends ClientMessageBrokerFactory {\n  /** @internal */\n  _serializer: Serializer;\n  constructor(private _messageBus: MessageBus, _serializer: Serializer) {\n    super();\n    this._serializer = _serializer;\n  }\n\n  /**\n   * Initializes the given channel and attaches a new {@link ClientMessageBroker} to it.\n   */\n  createMessageBroker(channel: string, runInZone: boolean = true): ClientMessageBroker {\n    this._messageBus.initChannel(channel, runInZone);\n    return new ClientMessageBroker_(this._messageBus, this._serializer, channel);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: MessageBus, },\n{type: Serializer, },\n];\n}\n\n/**\n * @experimental\n */\nexport abstract class ClientMessageBroker {\n  abstract runOnService(args: UiArguments, returnType: Type): Promise<any>;\n}\n\nexport class ClientMessageBroker_ extends ClientMessageBroker {\n  private _pending: Map<string, PromiseCompleter<any>> = new Map<string, PromiseCompleter<any>>();\n  private _sink: EventEmitter<any>;\n  /** @internal */\n  public _serializer: Serializer;\n\n  constructor(\n      messageBus: MessageBus, _serializer: Serializer, public channel: any /** TODO #9100 */) {\n    super();\n    this._sink = messageBus.to(channel);\n    this._serializer = _serializer;\n    var source = messageBus.from(channel);\n    ObservableWrapper.subscribe(\n        source, (message: {[key: string]: any}) => this._handleMessage(message));\n  }\n\n  private _generateMessageId(name: string): string {\n    var time: string = stringify(DateWrapper.toMillis(DateWrapper.now()));\n    var iteration: number = 0;\n    var id: string = name + time + stringify(iteration);\n    while (isPresent((this as any /** TODO #9100 */)._pending[id])) {\n      id = `${name}${time}${iteration}`;\n      iteration++;\n    }\n    return id;\n  }\n\n  runOnService(args: UiArguments, returnType: Type): Promise<any> {\n    var fnArgs: any[] /** TODO #9100 */ = [];\n    if (isPresent(args.args)) {\n      args.args.forEach(argument => {\n        if (argument.type != null) {\n          fnArgs.push(this._serializer.serialize(argument.value, argument.type));\n        } else {\n          fnArgs.push(argument.value);\n        }\n      });\n    }\n\n    var promise: Promise<any>;\n    var id: string = null;\n    if (returnType != null) {\n      var completer: PromiseCompleter<any> = PromiseWrapper.completer();\n      id = this._generateMessageId(args.method);\n      this._pending.set(id, completer);\n      PromiseWrapper.catchError(completer.promise, (err, stack?) => {\n        print(err);\n        completer.reject(err, stack);\n      });\n\n      promise = PromiseWrapper.then(completer.promise, (value: any) => {\n        if (this._serializer == null) {\n          return value;\n        } else {\n          return this._serializer.deserialize(value, returnType);\n        }\n      });\n    } else {\n      promise = null;\n    }\n\n    // TODO(jteplitz602): Create a class for these messages so we don't keep using StringMap #3685\n    var message = {'method': args.method, 'args': fnArgs};\n    if (id != null) {\n      (message as any /** TODO #9100 */)['id'] = id;\n    }\n    ObservableWrapper.callEmit(this._sink, message);\n\n    return promise;\n  }\n\n  private _handleMessage(message: {[key: string]: any}): void {\n    var data = new MessageData(message);\n    // TODO(jteplitz602): replace these strings with messaging constants #3685\n    if (StringWrapper.equals(data.type, 'result') || StringWrapper.equals(data.type, 'error')) {\n      var id = data.id;\n      if (this._pending.has(id)) {\n        if (StringWrapper.equals(data.type, 'result')) {\n          this._pending.get(id).resolve(data.value);\n        } else {\n          this._pending.get(id).reject(data.value, null);\n        }\n        this._pending.delete(id);\n      }\n    }\n  }\n}\n\nclass MessageData {\n  type: string;\n  value: any;\n  id: string;\n\n  constructor(data: {[key: string]: any}) {\n    this.type = StringMapWrapper.get(data, 'type');\n    this.id = this._getValueIfPresent(data, 'id');\n    this.value = this._getValueIfPresent(data, 'value');\n  }\n\n  /**\n   * Returns the value from the StringMap if present. Otherwise returns null\n   * @internal\n   */\n  _getValueIfPresent(data: {[key: string]: any}, key: string) {\n    if (StringMapWrapper.contains(data, key)) {\n      return StringMapWrapper.get(data, key);\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * @experimental\n */\nexport class FnArg {\n  constructor(public value: any /** TODO #9100 */, public type: Type) {}\n}\n\n/**\n * @experimental\n */\nexport class UiArguments {\n  constructor(public method: string, public args?: FnArg[]) {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}