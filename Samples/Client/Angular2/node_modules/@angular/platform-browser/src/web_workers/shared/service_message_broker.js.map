{"version":3,"file":"service_message_broker.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-browser/src/web_workers/shared/service_message_broker.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\n\nimport {EventEmitter, ObservableWrapper, PromiseWrapper} from '../../facade/async';\nimport {ListWrapper, Map} from '../../facade/collection';\nimport {FunctionWrapper, Type, isPresent} from '../../facade/lang';\nimport {MessageBus} from '../shared/message_bus';\nimport {Serializer} from '../shared/serializer';\n\nexport abstract class ServiceMessageBrokerFactory {\n  /**\n   * Initializes the given channel and attaches a new {@link ServiceMessageBroker} to it.\n   */\n  abstract createMessageBroker(channel: string, runInZone?: boolean): ServiceMessageBroker;\n}\nexport class ServiceMessageBrokerFactory_ extends ServiceMessageBrokerFactory {\n  /** @internal */\n  _serializer: Serializer;\n\n  constructor(private _messageBus: MessageBus, _serializer: Serializer) {\n    super();\n    this._serializer = _serializer;\n  }\n\n  createMessageBroker(channel: string, runInZone: boolean = true): ServiceMessageBroker {\n    this._messageBus.initChannel(channel, runInZone);\n    return new ServiceMessageBroker_(this._messageBus, this._serializer, channel);\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: MessageBus, },\n{type: Serializer, },\n];\n}\n\n/**\n * @experimental\n */\nexport abstract class ServiceMessageBroker {\n  abstract registerMethod(\n      methodName: string, signature: Type[], method: Function, returnType?: Type): void;\n}\n\n/**\n * Helper class for UIComponents that allows components to register methods.\n * If a registered method message is received from the broker on the worker,\n * the UIMessageBroker deserializes its arguments and calls the registered method.\n * If that method returns a promise, the UIMessageBroker returns the result to the worker.\n */\nexport class ServiceMessageBroker_ extends ServiceMessageBroker {\n  private _sink: EventEmitter<any>;\n  private _methods: Map<string, Function> = new Map<string, Function>();\n\n  constructor(\n      messageBus: MessageBus, private _serializer: Serializer,\n      public channel: any /** TODO #9100 */) {\n    super();\n    this._sink = messageBus.to(channel);\n    var source = messageBus.from(channel);\n    ObservableWrapper.subscribe(source, (message) => this._handleMessage(message));\n  }\n\n  registerMethod(\n      methodName: string, signature: Type[], method: (..._: any[]) => Promise<any>| void,\n      returnType?: Type): void {\n    this._methods.set(methodName, (message: ReceivedMessage) => {\n      var serializedArgs = message.args;\n      let numArgs = signature === null ? 0 : signature.length;\n      var deserializedArgs: any[] = ListWrapper.createFixedSize(numArgs);\n      for (var i = 0; i < numArgs; i++) {\n        var serializedArg = serializedArgs[i];\n        deserializedArgs[i] = this._serializer.deserialize(serializedArg, signature[i]);\n      }\n\n      var promise = FunctionWrapper.apply(method, deserializedArgs);\n      if (isPresent(returnType) && isPresent(promise)) {\n        this._wrapWebWorkerPromise(message.id, promise, returnType);\n      }\n    });\n  }\n\n  private _handleMessage(map: {[key: string]: any}): void {\n    var message = new ReceivedMessage(map);\n    if (this._methods.has(message.method)) {\n      this._methods.get(message.method)(message);\n    }\n  }\n\n  private _wrapWebWorkerPromise(id: string, promise: Promise<any>, type: Type): void {\n    PromiseWrapper.then(promise, (result: any) => {\n      ObservableWrapper.callEmit(\n          this._sink,\n          {'type': 'result', 'value': this._serializer.serialize(result, type), 'id': id});\n    });\n  }\n}\n\n/**\n * @experimental\n */\nexport class ReceivedMessage {\n  method: string;\n  args: any[];\n  id: string;\n  type: string;\n\n  constructor(data: {[key: string]: any}) {\n    this.method = data['method'];\n    this.args = data['args'];\n    this.id = data['id'];\n    this.type = data['type'];\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}