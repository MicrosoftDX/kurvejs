{"version":3,"file":"location_providers.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-browser/src/web_workers/worker/location_providers.ts"],"names":[],"mappings":";AAAA,uBAA+B,iBAAiB,CAAC,CAAA;AACjD,qBAAsC,eAAe,CAAC,CAAA;AAEtD,kCAAwC,qBAAqB,CAAC,CAAA;AAG9D;;;;GAIG;AACU,qCAA6B,GAAG;IAC3C,EAAC,OAAO,EAAE,yBAAgB,EAAE,QAAQ,EAAE,6CAAyB,EAAC,EAAE;QAChE,OAAO,EAAE,sBAAe;QACxB,UAAU,EAAE,gBAAgB;QAC5B,KAAK,EAAE,IAAI;QACX,IAAI,EAAE,CAAC,yBAAgB,EAAE,aAAM,CAAC;KACjC;CACF,CAAC;AAEF,0BAA0B,gBAA2C,EAAE,IAAY;IAEjF,MAAM,CAAC,cAAQ,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,cAAM,OAAA,gBAAgB,CAAC,IAAI,EAAE,EAAvB,CAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1E,CAAC","sourcesContent":["import {PlatformLocation} from '@angular/common';\nimport {APP_INITIALIZER, NgZone} from '@angular/core';\n\nimport {WebWorkerPlatformLocation} from './platform_location';\n\n\n/**\n * Those providers should be added when the router is used in a worker context in addition to the\n * {@link ROUTER_PROVIDERS} and after them.\n * @experimental\n */\nexport const WORKER_APP_LOCATION_PROVIDERS = [\n  {provide: PlatformLocation, useClass: WebWorkerPlatformLocation}, {\n    provide: APP_INITIALIZER,\n    useFactory: appInitFnFactory,\n    multi: true,\n    deps: [PlatformLocation, NgZone]\n  }\n];\n\nfunction appInitFnFactory(platformLocation: WebWorkerPlatformLocation, zone: NgZone): () =>\n    Promise<boolean> {\n  return () => { return zone.runGuarded(() => platformLocation.init()); };\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}