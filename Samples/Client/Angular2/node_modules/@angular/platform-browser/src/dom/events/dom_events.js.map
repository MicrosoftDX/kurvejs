{"version":3,"file":"dom_events.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-browser/src/dom/events/dom_events.ts"],"names":[],"mappings":";;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AAEzC,4BAAqB,gBAAgB,CAAC,CAAA;AACtC,8BAAiC,iBAAiB,CAAC,CAAA;AACnD;IAAqC,mCAAkB;IAAvD;QAAqC,8BAAkB;IAuBvD,CAAC;IAtBC,8EAA8E;IAC9E,UAAU;IACV,kCAAQ,GAAR,UAAS,SAAiB,IAAa,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAErD,0CAAgB,GAAhB,UAAiB,OAAoB,EAAE,SAAiB,EAAE,OAAiB;QACzE,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAClC,IAAI,cAAc,GAAG,UAAC,KAAU,CAAC,iBAAiB,IAAK,OAAA,IAAI,CAAC,UAAU,CAAC,cAAM,OAAA,OAAO,CAAC,KAAK,CAAC,EAAd,CAAc,CAAC,EAArC,CAAqC,CAAC;QAC7F,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,iBAAiB,CAC3C,cAAM,OAAA,oBAAM,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,EAAE,cAAc,CAAC,EAAxD,CAAwD,CAAC,CAAC;IACtE,CAAC;IAED,gDAAsB,GAAtB,UAAuB,MAAc,EAAE,SAAiB,EAAE,OAAiB;QACzE,IAAI,OAAO,GAAG,oBAAM,EAAE,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QACpD,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAClC,IAAI,cAAc,GAAG,UAAC,KAAU,CAAC,iBAAiB,IAAK,OAAA,IAAI,CAAC,UAAU,CAAC,cAAM,OAAA,OAAO,CAAC,KAAK,CAAC,EAAd,CAAc,CAAC,EAArC,CAAqC,CAAC;QAC7F,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,iBAAiB,CAC3C,cAAM,OAAA,oBAAM,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,EAAE,cAAc,CAAC,EAAxD,CAAwD,CAAC,CAAC;IACtE,CAAC;IACH,kBAAkB;IACX,0BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;KACnB,CAAC;IACF,sBAAC;AAAD,CAAC,AAvBD,CAAqC,kCAAkB,GAuBtD;AAvBY,uBAAe,kBAuB3B,CAAA","sourcesContent":["import {Injectable} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\nimport {EventManagerPlugin} from './event_manager';\nexport class DomEventsPlugin extends EventManagerPlugin {\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  supports(eventName: string): boolean { return true; }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    var zone = this.manager.getZone();\n    var outsideHandler = (event: any /** TODO #9100 */) => zone.runGuarded(() => handler(event));\n    return this.manager.getZone().runOutsideAngular(\n        () => getDOM().onAndCancel(element, eventName, outsideHandler));\n  }\n\n  addGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    var element = getDOM().getGlobalEventTarget(target);\n    var zone = this.manager.getZone();\n    var outsideHandler = (event: any /** TODO #9100 */) => zone.runGuarded(() => handler(event));\n    return this.manager.getZone().runOutsideAngular(\n        () => getDOM().onAndCancel(element, eventName, outsideHandler));\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}