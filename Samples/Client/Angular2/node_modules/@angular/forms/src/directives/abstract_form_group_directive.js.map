{"version":3,"file":"abstract_form_group_directive.js","sourceRoot":"","sources":["../../../../../modules/@angular/forms/src/directives/abstract_form_group_directive.ts"],"names":[],"mappings":";;;;;;AAIA,kCAA+B,qBAAqB,CAAC,CAAA;AAErD,uBAAqE,UAAU,CAAC,CAAA;AAGhF;;GAEG;AAEH;IAAgD,8CAAgB;IAAhE;QAAgD,8BAAgB;IAgChE,CAAC;IAtBC,6CAAQ,GAAR,cAAmB,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAE3D,gDAAW,GAAX,cAAsB,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAKjE,sBAAI,+CAAO;QAHX;;WAEG;aACH,cAA2B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAK1E,sBAAI,4CAAI;QAHR;;WAEG;aACH,cAAuB,MAAM,CAAC,oBAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAKrE,sBAAI,qDAAa;QAHjB;;WAEG;aACH,cAA4B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;;;OAAA;IAEhE,sBAAI,iDAAS;aAAb,cAA+B,MAAM,CAAC,0BAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAE5E,sBAAI,sDAAc;aAAlB,cAAyC,MAAM,CAAC,+BAAsB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAClG,iCAAC;AAAD,CAAC,AAhCD,CAAgD,oCAAgB,GAgC/D;AAhCY,kCAA0B,6BAgCtC,CAAA","sourcesContent":["import {OnDestroy, OnInit} from '@angular/core';\n\nimport {FormGroup} from '../model';\n\nimport {ControlContainer} from './control_container';\nimport {Form} from './form_interface';\nimport {composeAsyncValidators, composeValidators, controlPath} from './shared';\nimport {AsyncValidatorFn, ValidatorFn} from './validators';\n\n/**\n  This is a base class for code shared between {@link NgModelGroup} and {@link FormGroupName}.\n */\n\nexport class AbstractFormGroupDirective extends ControlContainer implements OnInit, OnDestroy {\n  /** @internal */\n  _parent: ControlContainer;\n\n  /** @internal */\n  _validators: any[];\n\n  /** @internal */\n  _asyncValidators: any[];\n\n  ngOnInit(): void { this.formDirective.addFormGroup(this); }\n\n  ngOnDestroy(): void { this.formDirective.removeFormGroup(this); }\n\n  /**\n   * Get the {@link FormGroup} backing this binding.\n   */\n  get control(): FormGroup { return this.formDirective.getFormGroup(this); }\n\n  /**\n   * Get the path to this control group.\n   */\n  get path(): string[] { return controlPath(this.name, this._parent); }\n\n  /**\n   * Get the {@link Form} to which this group belongs.\n   */\n  get formDirective(): Form { return this._parent.formDirective; }\n\n  get validator(): ValidatorFn { return composeValidators(this._validators); }\n\n  get asyncValidator(): AsyncValidatorFn { return composeAsyncValidators(this._asyncValidators); }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}