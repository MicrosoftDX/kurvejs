{"version":3,"file":"validators.js","sourceRoot":"","sources":["../../../../../modules/@angular/forms/src/directives/validators.ts"],"names":[],"mappings":"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","sourcesContent":["import {Attribute, Directive, forwardRef} from '@angular/core';\n\nimport {NumberWrapper} from '../facade/lang';\nimport {AbstractControl} from '../model';\nimport {NG_VALIDATORS, Validators} from '../validators';\n\n\n\n/**\n * An interface that can be implemented by classes that can act as validators.\n *\n * ## Usage\n *\n * ```typescript\n * @Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(c: Control): {[key: string]: any} {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n */\nexport interface Validator { validate(c: AbstractControl): {[key: string]: any}; }\n\nconst REQUIRED = /*@ts2dart_const*/ Validators.required;\n\nexport const REQUIRED_VALIDATOR: any = /*@ts2dart_const*/ /*@ts2dart_Provider*/ {\n  provide: NG_VALIDATORS,\n  useValue: REQUIRED,\n  multi: true\n};\nexport class RequiredValidator {\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[required][formControlName],[required][formControl],[required][ngModel]',\n  providers: [REQUIRED_VALIDATOR]\n}, ] },\n];\n}\n\nexport interface ValidatorFn { (c: AbstractControl): {[key: string]: any}; }\nexport interface AsyncValidatorFn {\n  (c: AbstractControl): any /*Promise<{[key: string]: any}>|Observable<{[key: string]: any}>*/;\n}\n\n/**\n * Provivder which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='min'}\n */\nexport const MIN_LENGTH_VALIDATOR: any = /*@ts2dart_const*/ /*@ts2dart_Provider*/ {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MinLengthValidator),\n  multi: true\n};\nexport class MinLengthValidator implements Validator {\n  private _validator: ValidatorFn;\n\n  constructor( minLength: string) {\n    this._validator = Validators.minLength(NumberWrapper.parseInt(minLength, 10));\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} { return this._validator(c); }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n  providers: [MIN_LENGTH_VALIDATOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: undefined, decorators: [{ type: Attribute, args: ['minlength', ] }, ]},\n];\n}\n\n/**\n * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {@example common/forms/ts/validators/validators.ts region='max'}\n */\nexport const MAX_LENGTH_VALIDATOR: any = /*@ts2dart_const*/ /*@ts2dart_Provider*/ {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MaxLengthValidator),\n  multi: true\n};\nexport class MaxLengthValidator implements Validator {\n  private _validator: ValidatorFn;\n\n  constructor( maxLength: string) {\n    this._validator = Validators.maxLength(NumberWrapper.parseInt(maxLength, 10));\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} { return this._validator(c); }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n  providers: [MAX_LENGTH_VALIDATOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: undefined, decorators: [{ type: Attribute, args: ['maxlength', ] }, ]},\n];\n}\n\n\nexport const PATTERN_VALIDATOR: any = /*@ts2dart_const*/ /*@ts2dart_Provider*/ {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => PatternValidator),\n  multi: true\n};\nexport class PatternValidator implements Validator {\n  private _validator: ValidatorFn;\n\n  constructor( pattern: string) {\n    this._validator = Validators.pattern(pattern);\n  }\n\n  validate(c: AbstractControl): {[key: string]: any} { return this._validator(c); }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n  providers: [PATTERN_VALIDATOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: undefined, decorators: [{ type: Attribute, args: ['pattern', ] }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}