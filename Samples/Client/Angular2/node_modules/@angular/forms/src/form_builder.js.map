{"version":3,"file":"form_builder.js","sourceRoot":"","sources":["../../../../modules/@angular/forms/src/form_builder.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\n\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {StringMapWrapper} from './facade/collection';\nimport {isArray, isPresent} from './facade/lang';\nimport * as modelModule from './model';\nexport class FormBuilder {\n  /**\n   * Construct a new {@link FormGroup} with the given map of configuration.\n   * Valid keys for the `extra` parameter map are `optionals` and `validator`.\n   *\n   * See the {@link FormGroup} constructor for more details.\n   */\n  group(controlsConfig: {[key: string]: any}, extra: {[key: string]: any} = null):\n      modelModule.FormGroup {\n    var controls = this._reduceControls(controlsConfig);\n    var optionals = <{[key: string]: boolean}>(\n        isPresent(extra) ? StringMapWrapper.get(extra, 'optionals') : null);\n    var validator: ValidatorFn = isPresent(extra) ? StringMapWrapper.get(extra, 'validator') : null;\n    var asyncValidator: AsyncValidatorFn =\n        isPresent(extra) ? StringMapWrapper.get(extra, 'asyncValidator') : null;\n    return new modelModule.FormGroup(controls, optionals, validator, asyncValidator);\n  }\n  /**\n   * Construct a new {@link FormControl} with the given `value`,`validator`, and `asyncValidator`.\n   */\n  control(\n      value: Object, validator: ValidatorFn|ValidatorFn[] = null,\n      asyncValidator: AsyncValidatorFn|AsyncValidatorFn[] = null): modelModule.FormControl {\n    return new modelModule.FormControl(value, validator, asyncValidator);\n  }\n\n  /**\n   * Construct an array of {@link FormControl}s from the given `controlsConfig` array of\n   * configuration, with the given optional `validator` and `asyncValidator`.\n   */\n  array(\n      controlsConfig: any[], validator: ValidatorFn = null,\n      asyncValidator: AsyncValidatorFn = null): modelModule.FormArray {\n    var controls = controlsConfig.map(c => this._createControl(c));\n    return new modelModule.FormArray(controls, validator, asyncValidator);\n  }\n\n  /** @internal */\n  _reduceControls(controlsConfig: {[k: string]: any}):\n      {[key: string]: modelModule.AbstractControl} {\n    var controls: {[key: string]: modelModule.AbstractControl} = {};\n    StringMapWrapper.forEach(controlsConfig, (controlConfig: any, controlName: string) => {\n      controls[controlName] = this._createControl(controlConfig);\n    });\n    return controls;\n  }\n\n  /** @internal */\n  _createControl(controlConfig: any): modelModule.AbstractControl {\n    if (controlConfig instanceof modelModule.FormControl ||\n        controlConfig instanceof modelModule.FormGroup ||\n        controlConfig instanceof modelModule.FormArray) {\n      return controlConfig;\n\n    } else if (isArray(controlConfig)) {\n      var value = controlConfig[0];\n      var validator: ValidatorFn = controlConfig.length > 1 ? controlConfig[1] : null;\n      var asyncValidator: AsyncValidatorFn = controlConfig.length > 2 ? controlConfig[2] : null;\n      return this.control(value, validator, asyncValidator);\n\n    } else {\n      return this.control(controlConfig);\n    }\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}