{"version":3,"file":"select_multiple_control_value_accessor.js","sourceRoot":"","sources":["../../../../../../modules/@angular/forms/src/directives/select_multiple_control_value_accessor.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, ElementRef, Host, Input, OnDestroy, Optional, Renderer, forwardRef} from '@angular/core';\n\nimport {MapWrapper} from '../facade/collection';\nimport {StringWrapper, isBlank, isPresent, isPrimitive, isString, looseIdentical} from '../facade/lang';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from './control_value_accessor';\n\nconst SELECT_MULTIPLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => SelectMultipleControlValueAccessor),\n  multi: true\n};\n\nfunction _buildValueString(id: string, value: any): string {\n  if (isBlank(id)) return `${value}`;\n  if (isString(value)) value = `'${value}'`;\n  if (!isPrimitive(value)) value = 'Object';\n  return StringWrapper.slice(`${id}: ${value}`, 0, 50);\n}\n\nfunction _extractId(valueString: string): string {\n  return valueString.split(':')[0];\n}\n\n/** Mock interface for HTML Options */\ninterface HTMLOption {\n  value: string;\n  selected: boolean;\n}\n\n/** Mock interface for HTMLCollection */\nabstract class HTMLCollection {\n  length: number;\n  abstract item(_: number): HTMLOption;\n}\nexport class SelectMultipleControlValueAccessor implements ControlValueAccessor {\n  value: any;\n  /** @internal */\n  _optionMap: Map<string, NgSelectMultipleOption> = new Map<string, NgSelectMultipleOption>();\n  /** @internal */\n  _idCounter: number = 0;\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  constructor() {}\n\n  writeValue(value: any): void {\n    this.value = value;\n    if (value == null) return;\n    let values: Array<any> = <Array<any>>value;\n    // convert values to ids\n    let ids = values.map((v) => this._getOptionId(v));\n    this._optionMap.forEach((opt, o) => { opt._setSelected(ids.indexOf(o.toString()) > -1); });\n  }\n\n  registerOnChange(fn: (value: any) => any): void {\n    this.onChange = (_: any) => {\n      let selected: Array<any> = [];\n      if (_.hasOwnProperty('selectedOptions')) {\n        let options: HTMLCollection = _.selectedOptions;\n        for (var i = 0; i < options.length; i++) {\n          let opt: any = options.item(i);\n          let val: any = this._getOptionValue(opt.value);\n          selected.push(val);\n        }\n      }\n      // Degrade on IE\n      else {\n        let options: HTMLCollection = <HTMLCollection>_.options;\n        for (var i = 0; i < options.length; i++) {\n          let opt: HTMLOption = options.item(i);\n          if (opt.selected) {\n            let val: any = this._getOptionValue(opt.value);\n            selected.push(val);\n          }\n        }\n      }\n      fn(selected);\n    };\n  }\n  registerOnTouched(fn: () => any): void { this.onTouched = fn; }\n\n  /** @internal */\n  _registerOption(value: NgSelectMultipleOption): string {\n    let id: string = (this._idCounter++).toString();\n    this._optionMap.set(id, value);\n    return id;\n  }\n\n  /** @internal */\n  _getOptionId(value: any): string {\n    for (let id of MapWrapper.keys(this._optionMap)) {\n      if (looseIdentical(this._optionMap.get(id)._value, value)) return id;\n    }\n    return null;\n  }\n\n  /** @internal */\n  _getOptionValue(valueString: string): any {\n    let opt = this._optionMap.get(_extractId(valueString));\n    return isPresent(opt) ? opt._value : valueString;\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n  host: {'(input)': 'onChange($event.target)', '(blur)': 'onTouched()'},\n  providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n];\n}\nexport class NgSelectMultipleOption implements OnDestroy {\n  id: string;\n  /** @internal */\n  _value: any;\n\n  constructor(\n      private _element: ElementRef, private _renderer: Renderer, private _select: SelectMultipleControlValueAccessor) {\n    if (isPresent(this._select)) {\n      this.id = this._select._registerOption(this);\n    }\n  }\n  set ngValue(value: any) {\n    if (this._select == null) return;\n    this._value = value;\n    this._setElementValue(_buildValueString(this.id, value));\n    this._select.writeValue(this._select.value);\n  }\n  set value(value: any) {\n    if (isPresent(this._select)) {\n      this._value = value;\n      this._setElementValue(_buildValueString(this.id, value));\n      this._select.writeValue(this._select.value);\n    } else {\n      this._setElementValue(value);\n    }\n  }\n\n  /** @internal */\n  _setElementValue(value: string): void {\n    this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n  }\n\n  /** @internal */\n  _setSelected(selected: boolean) {\n    this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n  }\n\n  ngOnDestroy() {\n    if (isPresent(this._select)) {\n      this._select._optionMap.delete(this.id);\n      this._select.writeValue(this._select.value);\n    }\n  }\n/** @nocollapse */\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'option'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: {type: Function, decorators?: DecoratorInvocation[]}[] = [\n{type: ElementRef, },\n{type: Renderer, },\n{type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host }, ]},\n];\n/** @nocollapse */\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngValue': [{ type: Input, args: ['ngValue', ] },],\n'value': [{ type: Input, args: ['value', ] },],\n};\n}\n\nexport const SELECT_DIRECTIVES = [SelectMultipleControlValueAccessor, NgSelectMultipleOption];\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}