{"version":3,"file":"regex_route_path.js","sourceRoot":"","sources":["../../../../../../modules/@angular/router-deprecated/src/rules/route_paths/regex_route_path.ts"],"names":[],"mappings":";AAAA,qBAA4B,eAAe,CAAC,CAAA;AAE5C,qBAA2D,mBAAmB,CAAC,CAAA;AAG/E,2BAAkD,cAAc,CAAC,CAAA;AAKjE,oCAAoC,KAAa;IAC/C,2EAA2E;IAC3E,uEAAuE;IACvE,gCAAgC;IAChC,IAAI,UAAU,GAAG,oBAAa,CAAC,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;IACnD,IAAI,OAAO,GAAG,oBAAa,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IACpD,IAAI,KAAK,GAAG,2BAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC/C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;AACtB,CAAC;AAED;IAOE,wBACY,SAAiB,EAAU,WAA4B,EACvD,WAA2B;QAD3B,cAAS,GAAT,SAAS,CAAQ;QAAU,gBAAW,GAAX,WAAW,CAAiB;QACvD,gBAAW,GAAX,WAAW,CAAgB;QAPhC,aAAQ,GAAY,IAAI,CAAC;QACzB,gBAAW,GAAW,GAAG,CAAC;QAO/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,oBAAa,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACnD,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;YAC7B,IAAI,MAAM,GAAG,0BAA0B,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACxD,EAAE,CAAC,CAAC,MAAM,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjC,MAAM,IAAI,oBAAa,CACnB,wBAAsB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,sHAEzD,IAAI,CAAC,SAAS,WAAM,MAAM,+BAA4B,CAAC,CAAC;YACrD,CAAC;QACH,CAAC;IACH,CAAC;IAED,iCAAQ,GAAR,UAAS,GAAQ;QACf,IAAI,OAAO,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC7B,IAAI,MAAM,GAA4B,EAAE,CAAC;QACzC,IAAI,OAAO,GAAG,oBAAa,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC1D,IAAI,KAAK,GAAG,2BAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE/C,EAAE,CAAC,CAAC,cAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;YACzC,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACnF,CAAC;QAED,MAAM,CAAC,IAAI,uBAAU,CAAC,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC;IAED,oCAAW,GAAX,UAAY,MAA4B,IAAkB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAE5F,iCAAQ,GAAR,cAAqB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IAC/C,qBAAC;AAAD,CAAC,AA3CD,IA2CC;AA3CY,sBAAc,iBA2C1B,CAAA","sourcesContent":["import {BaseException} from '@angular/core';\n\nimport {RegExpMatcherWrapper, RegExpWrapper, isBlank} from '../../facade/lang';\nimport {Url} from '../../url_parser';\n\nimport {GeneratedUrl, MatchedUrl, RoutePath} from './route_path';\n\n\nexport interface RegexSerializer { (params: {[key: string]: any}): GeneratedUrl; }\n\nfunction computeNumberOfRegexGroups(regex: string): number {\n  // cleverly compute regex groups by appending an alternative empty matching\n  // pattern and match against an empty string, the resulting match still\n  // receives all the other groups\n  var test_regex = RegExpWrapper.create(regex + '|');\n  var matcher = RegExpWrapper.matcher(test_regex, '');\n  var match = RegExpMatcherWrapper.next(matcher);\n  return match.length;\n}\n\nexport class RegexRoutePath implements RoutePath {\n  public hash: string;\n  public terminal: boolean = true;\n  public specificity: string = '2';\n\n  private _regex: RegExp;\n\n  constructor(\n      private _reString: string, private _serializer: RegexSerializer,\n      private _groupNames?: Array<string>) {\n    this.hash = this._reString;\n    this._regex = RegExpWrapper.create(this._reString);\n    if (this._groupNames != null) {\n      var groups = computeNumberOfRegexGroups(this._reString);\n      if (groups != _groupNames.length) {\n        throw new BaseException(\n            `Regex group names [${this._groupNames.join(',')}] must contain names for \\\neach matching group and a name for the complete match as its first element of regex \\\n'${this._reString}'. ${groups} group names are expected.`);\n      }\n    }\n  }\n\n  matchUrl(url: Url): MatchedUrl {\n    var urlPath = url.toString();\n    var params: {[key: string]: string} = {};\n    var matcher = RegExpWrapper.matcher(this._regex, urlPath);\n    var match = RegExpMatcherWrapper.next(matcher);\n\n    if (isBlank(match)) {\n      return null;\n    }\n\n    for (let i = 0; i < match.length; i += 1) {\n      params[this._groupNames != null ? this._groupNames[i] : i.toString()] = match[i];\n    }\n\n    return new MatchedUrl(urlPath, [], params, [], null);\n  }\n\n  generateUrl(params: {[key: string]: any}): GeneratedUrl { return this._serializer(params); }\n\n  toString(): string { return this._reString; }\n}\n"]}