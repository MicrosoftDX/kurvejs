{"version":3,"file":"static_request.js","sourceRoot":"","sources":["../../../../../modules/@angular/http/src/static_request.ts"],"names":[],"mappings":"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","sourcesContent":["import {StringWrapper, isPresent} from '../src/facade/lang';\n\nimport {ContentType, RequestMethod} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n\n\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {@link Http} and\n * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n *\n * @Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n */\nexport class Request {\n  /**\n   * Http method with which to perform the request.\n   */\n  method: RequestMethod;\n  /**\n   * {@link Headers} instance\n   */\n  headers: Headers;\n  /** Url of the remote resource */\n  url: string;\n  /** Body of the request **/\n  private _body: any;\n  /** Type of the request body **/\n  private contentType: ContentType;\n  /** Enable use credentials */\n  withCredentials: boolean;\n  constructor(requestOptions: RequestArgs) {\n    // TODO: assert that url is present\n    let url = requestOptions.url;\n    this.url = requestOptions.url;\n    if (isPresent(requestOptions.search)) {\n      let search = requestOptions.search.toString();\n      if (search.length > 0) {\n        let prefix = '?';\n        if (StringWrapper.contains(this.url, '?')) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + search;\n      }\n    }\n    this._body = requestOptions.body;\n    this.contentType = this.detectContentType();\n    this.method = normalizeMethodName(requestOptions.method);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    // TODO(jeffbcross): implement behavior\n    this.headers = new Headers(requestOptions.headers);\n    this.withCredentials = requestOptions.withCredentials;\n  }\n\n\n  /**\n   * Returns the request's body as string, assuming that body exists. If body is undefined, return\n   * empty\n   * string.\n   */\n  text(): string { return isPresent(this._body) ? this._body.toString() : ''; }\n\n  /**\n   * Returns the request's body as JSON string, assuming that body exists. If body is undefined,\n   * return\n   * empty\n   * string.\n   */\n  json(): string { return isPresent(this._body) ? JSON.stringify(this._body) : ''; }\n\n  /**\n   * Returns the request's body as array buffer, assuming that body exists. If body is undefined,\n   * return\n   * null.\n   */\n  arrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) return <ArrayBuffer>this._body;\n    throw 'The request body isn\\'t an array buffer';\n  }\n\n  /**\n   * Returns the request's body as blob, assuming that body exists. If body is undefined, return\n   * null.\n   */\n  blob(): Blob {\n    if (this._body instanceof Blob) return <Blob>this._body;\n    if (this._body instanceof ArrayBuffer) return new Blob([this._body]);\n    throw 'The request body isn\\'t either a blob or an array buffer';\n  }\n\n  /**\n   * Returns the content type of request's body based on its type.\n   */\n  detectContentType() {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body == 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n\n  /**\n   * Returns the request's body according to its type. If body is undefined, return\n   * null.\n   */\n  getBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.json();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nconst noop = function() {};\nconst w = typeof window == 'object' ? window : noop;\nconst FormData = (w as any /** TODO #9100 */)['FormData'] || noop;\nconst Blob = (w as any /** TODO #9100 */)['Blob'] || noop;\nconst ArrayBuffer = (w as any /** TODO #9100 */)['ArrayBuffer'] || noop;\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}