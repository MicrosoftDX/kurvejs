{"version":3,"file":"animation_player.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/animation/animation_player.ts"],"names":[],"mappings":"OAAO,EAAC,aAAa,EAAC,MAAM,sBAAsB;OAC3C,EAAC,iBAAiB,EAAC,MAAM,gBAAgB;AAEhD;IAUE,IAAI,YAAY,KAAsB,MAAM,IAAI,aAAa,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC;IAC/F,IAAI,YAAY,CAAC,MAAuB;QACtC,MAAM,IAAI,aAAa,CAAC,6BAA6B,CAAC,CAAC;IACzD,CAAC;AACH,CAAC;AAED;IAGE;QAFQ,mBAAc,GAA4B,EAAE,CAAC;QAC9C,iBAAY,GAAoB,IAAI,CAAC;QAC5B,iBAAiB,CAAC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IAAC,CAAC;IAC5D,gBAAgB;IAChB,SAAS;QACP,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,MAAM,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;IAC3B,CAAC;IACD,MAAM,CAAC,EAAY,IAAU,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5D,IAAI,KAAU,CAAC;IACf,KAAK,KAAU,CAAC;IAChB,OAAO,KAAU,CAAC;IAClB,MAAM,KAAW,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;IACpC,OAAO,KAAU,CAAC;IAClB,KAAK,KAAU,CAAC;IAChB,WAAW,CAAC,CAAM,CAAC,iBAAiB,IAAS,CAAC;IAC9C,WAAW,KAAa,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC;AAAA","sourcesContent":["import {BaseException} from '../facade/exceptions';\nimport {scheduleMicroTask} from '../facade/lang';\n\nexport abstract class AnimationPlayer {\n  abstract onDone(fn: Function): void;\n  abstract play(): void;\n  abstract pause(): void;\n  abstract restart(): void;\n  abstract finish(): void;\n  abstract destroy(): void;\n  abstract reset(): void;\n  abstract setPosition(p: any /** TODO #9100 */): void;\n  abstract getPosition(): number;\n  get parentPlayer(): AnimationPlayer { throw new BaseException('NOT IMPLEMENTED: Base Class'); }\n  set parentPlayer(player: AnimationPlayer) {\n    throw new BaseException('NOT IMPLEMENTED: Base Class');\n  }\n}\n\nexport class NoOpAnimationPlayer implements AnimationPlayer {\n  private _subscriptions: any[] /** TODO #9100 */ = [];\n  public parentPlayer: AnimationPlayer = null;\n  constructor() { scheduleMicroTask(() => this._onFinish()); }\n  /** @internal */\n  _onFinish() {\n    this._subscriptions.forEach(entry => { entry(); });\n    this._subscriptions = [];\n  }\n  onDone(fn: Function): void { this._subscriptions.push(fn); }\n  play(): void {}\n  pause(): void {}\n  restart(): void {}\n  finish(): void { this._onFinish(); }\n  destroy(): void {}\n  reset(): void {}\n  setPosition(p: any /** TODO #9100 */): void {}\n  getPosition(): number { return 0; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}