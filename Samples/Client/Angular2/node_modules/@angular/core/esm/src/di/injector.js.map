{"version":3,"file":"injector.js","sourceRoot":"","sources":["../../../../../../modules/@angular/core/src/di/injector.ts"],"names":[],"mappings":"OAAO,EAAC,aAAa,EAAC,MAAM,sBAAsB;AAElD,MAAM,mBAAmB,GAAsB,IAAI,MAAM,EAAE,CAAC;AAC5D,OAAO,MAAM,kBAAkB,GAAsB,mBAAmB,CAAC;AAEzE;;GAEG;AACH;IAGE;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,GAAG,CAAC,KAAU,EAAE,aAAmB,IAAS,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACvE,CAAC;AA3BQ,2BAAkB,GAAG,mBAAmB,CA2BhD","sourcesContent":["import {unimplemented} from '../facade/exceptions';\n\nconst _THROW_IF_NOT_FOUND = /*@ts2dart_const*/ new Object();\nexport const THROW_IF_NOT_FOUND = /*@ts2dart_const*/ _THROW_IF_NOT_FOUND;\n\n/**\n * @stable\n */\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * If not found:\n   * - Throws {@link NoProviderError} if no `notFoundValue` that is not equal to\n   * Injector.THROW_IF_NOT_FOUND is given\n   * - Returns the `notFoundValue` otherwise\n   *\n   * ### Example ([live demo](http://plnkr.co/edit/HeXSHg?p=preview))\n   *\n   * ```typescript\n   * var injector = ReflectiveInjector.resolveAndCreate([\n   *   {provide: \"validToken\", useValue: \"Value\"}\n   * ]);\n   * expect(injector.get(\"validToken\")).toEqual(\"Value\");\n   * expect(() => injector.get(\"invalidToken\")).toThrowError();\n   * ```\n   *\n   * `Injector` returns itself when given `Injector` as a token.\n   *\n   * ```typescript\n   * var injector = ReflectiveInjector.resolveAndCreate([]);\n   * expect(injector.get(Injector)).toBe(injector);\n   * ```\n   */\n  get(token: any, notFoundValue?: any): any { return unimplemented(); }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}