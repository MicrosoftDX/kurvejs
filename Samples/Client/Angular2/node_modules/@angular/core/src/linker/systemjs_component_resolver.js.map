{"version":3,"file":"systemjs_component_resolver.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/systemjs_component_resolver.ts"],"names":[],"mappings":";AAAA,qBAAqC,gBAAgB,CAAC,CAAA;AAKtD,IAAM,UAAU,GAAG,GAAG,CAAC;AAEvB;;;GAGG;AACH;IACE,mCAAoB,SAA4B;QAA5B,cAAS,GAAT,SAAS,CAAmB;IAAG,CAAC;IAEpD,oDAAgB,GAAhB,UAAiB,aAA0B;QAA3C,iBAeC;QAdC,EAAE,CAAC,CAAC,eAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAA,oCAAyD,EAApD,cAAM,EAAE,mBAAS,CAAoC;YAE1D,EAAE,CAAC,CAAC,WAAS,KAAK,KAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1B,wDAAwD;gBACxD,WAAS,GAAG,SAAS,CAAC;YACxB,CAAC;YAED,MAAM,CAAO,aAAO;iBACf,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;iBACrB,IAAI,CAAC,UAAC,MAAW,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,WAAS,CAAC,CAAC,EAAlD,CAAkD,CAAC,CAAC;QACjF,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;IACxD,CAAC;IAED,8CAAU,GAAV,cAAoB,CAAC;IACvB,gCAAC;AAAD,CAAC,AArBD,IAqBC;AArBY,iCAAyB,4BAqBrC,CAAA;AAED,IAAM,qBAAqB,GAAG,YAAY,CAAC;AAC3C,IAAM,oBAAoB,GAAG,WAAW,CAAC;AAEzC;;;GAGG;AACH;IAAA;IAaA,CAAC;IAZC,qDAAgB,GAAhB,UAAiB,aAA0B;QACzC,EAAE,CAAC,CAAC,eAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAA,oCAAuD,EAAlD,cAAM,EAAE,iBAAO,CAAoC;YACxD,MAAM,CAAO,aAAO;iBACf,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,qBAAqB,CAAC;iBAC7C,IAAI,CAAC,UAAC,MAAW,IAAK,OAAA,MAAM,CAAC,SAAO,GAAG,oBAAoB,CAAC,EAAtC,CAAsC,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,+CAAU,GAAV,cAAoB,CAAC;IACvB,iCAAC;AAAD,CAAC,AAbD,IAaC;AAbY,kCAA0B,6BAatC,CAAA","sourcesContent":["import {Type, global, isString} from '../facade/lang';\n\nimport {ComponentFactory} from './component_factory';\nimport {ComponentResolver} from './component_resolver';\n\nconst _SEPARATOR = '#';\n\n/**\n * Component resolver that can load components lazily\n * @experimental\n */\nexport class SystemJsComponentResolver implements ComponentResolver {\n  constructor(private _resolver: ComponentResolver) {}\n\n  resolveComponent(componentType: string|Type): Promise<ComponentFactory<any>> {\n    if (isString(componentType)) {\n      let [module, component] = componentType.split(_SEPARATOR);\n\n      if (component === void(0)) {\n        // Use the default export when no component is specified\n        component = 'default';\n      }\n\n      return (<any>global)\n          .System.import(module)\n          .then((module: any) => this._resolver.resolveComponent(module[component]));\n    }\n\n    return this._resolver.resolveComponent(componentType);\n  }\n\n  clearCache(): void {}\n}\n\nconst FACTORY_MODULE_SUFFIX = '.ngfactory';\nconst FACTORY_CLASS_SUFFIX = 'NgFactory';\n\n/**\n * Component resolver that can load component factories lazily\n * @experimental\n */\nexport class SystemJsCmpFactoryResolver implements ComponentResolver {\n  resolveComponent(componentType: string|Type): Promise<ComponentFactory<any>> {\n    if (isString(componentType)) {\n      let [module, factory] = componentType.split(_SEPARATOR);\n      return (<any>global)\n          .System.import(module + FACTORY_MODULE_SUFFIX)\n          .then((module: any) => module[factory + FACTORY_CLASS_SUFFIX]);\n    }\n\n    return Promise.resolve(null);\n  }\n\n  clearCache(): void {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}