{"version":3,"file":"animation_player.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/animation/animation_player.ts"],"names":[],"mappings":";AAAA,2BAA4B,sBAAsB,CAAC,CAAA;AACnD,qBAAgC,gBAAgB,CAAC,CAAA;AAEjD;IAAA;IAcA,CAAC;IAJC,sBAAI,yCAAY;aAAhB,cAAsC,MAAM,IAAI,0BAAa,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC;aAC/F,UAAiB,MAAuB;YACtC,MAAM,IAAI,0BAAa,CAAC,6BAA6B,CAAC,CAAC;QACzD,CAAC;;;OAH8F;IAIjG,sBAAC;AAAD,CAAC,AAdD,IAcC;AAdqB,uBAAe,kBAcpC,CAAA;AAED;IAGE;QAHF,iBAkBC;QAjBS,mBAAc,GAA4B,EAAE,CAAC;QAC9C,iBAAY,GAAoB,IAAI,CAAC;QAC5B,wBAAiB,CAAC,cAAM,OAAA,KAAI,CAAC,SAAS,EAAE,EAAhB,CAAgB,CAAC,CAAC;IAAC,CAAC;IAC5D,gBAAgB;IAChB,uCAAS,GAAT;QACE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,KAAK,IAAM,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;IAC3B,CAAC;IACD,oCAAM,GAAN,UAAO,EAAY,IAAU,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5D,kCAAI,GAAJ,cAAc,CAAC;IACf,mCAAK,GAAL,cAAe,CAAC;IAChB,qCAAO,GAAP,cAAiB,CAAC;IAClB,oCAAM,GAAN,cAAiB,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;IACpC,qCAAO,GAAP,cAAiB,CAAC;IAClB,mCAAK,GAAL,cAAe,CAAC;IAChB,yCAAW,GAAX,UAAY,CAAM,CAAC,iBAAiB,IAAS,CAAC;IAC9C,yCAAW,GAAX,cAAwB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,0BAAC;AAAD,CAAC,AAlBD,IAkBC;AAlBY,2BAAmB,sBAkB/B,CAAA","sourcesContent":["import {BaseException} from '../facade/exceptions';\nimport {scheduleMicroTask} from '../facade/lang';\n\nexport abstract class AnimationPlayer {\n  abstract onDone(fn: Function): void;\n  abstract play(): void;\n  abstract pause(): void;\n  abstract restart(): void;\n  abstract finish(): void;\n  abstract destroy(): void;\n  abstract reset(): void;\n  abstract setPosition(p: any /** TODO #9100 */): void;\n  abstract getPosition(): number;\n  get parentPlayer(): AnimationPlayer { throw new BaseException('NOT IMPLEMENTED: Base Class'); }\n  set parentPlayer(player: AnimationPlayer) {\n    throw new BaseException('NOT IMPLEMENTED: Base Class');\n  }\n}\n\nexport class NoOpAnimationPlayer implements AnimationPlayer {\n  private _subscriptions: any[] /** TODO #9100 */ = [];\n  public parentPlayer: AnimationPlayer = null;\n  constructor() { scheduleMicroTask(() => this._onFinish()); }\n  /** @internal */\n  _onFinish() {\n    this._subscriptions.forEach(entry => { entry(); });\n    this._subscriptions = [];\n  }\n  onDone(fn: Function): void { this._subscriptions.push(fn); }\n  play(): void {}\n  pause(): void {}\n  restart(): void {}\n  finish(): void { this._onFinish(); }\n  destroy(): void {}\n  reset(): void {}\n  setPosition(p: any /** TODO #9100 */): void {}\n  getPosition(): number { return 0; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}