{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../modules/@angular/platform-browser-dynamic/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {COMMON_DIRECTIVES, COMMON_PIPES} from '@angular/common';\nimport {COMPILER_PROVIDERS, CompilerConfig, XHR} from '@angular/compiler';\nimport {ApplicationRef, ComponentRef, PLATFORM_DIRECTIVES, PLATFORM_PIPES, ReflectiveInjector, Type, coreLoadAndBootstrap} from '@angular/core';\nimport {BROWSER_APP_PROVIDERS, WORKER_APP_APPLICATION_PROVIDERS, WORKER_SCRIPT, WORKER_UI_APPLICATION_PROVIDERS, browserPlatform, workerAppPlatform, workerUiPlatform} from '@angular/platform-browser';\n\nimport {ReflectionCapabilities, reflector} from './core_private';\nimport {PromiseWrapper} from './src/facade/async';\nimport {isPresent} from './src/facade/lang';\nimport {CachedXHR} from './src/xhr/xhr_cache';\nimport {XHRImpl} from './src/xhr/xhr_impl';\n\n\nexport const BROWSER_APP_COMPILER_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  COMPILER_PROVIDERS, {\n    provide: CompilerConfig,\n    useFactory: (platformDirectives: any[], platformPipes: any[]) => {\n      return new CompilerConfig({platformDirectives, platformPipes});\n    },\n    deps: [PLATFORM_DIRECTIVES, PLATFORM_PIPES]\n  },\n  {provide: XHR, useClass: XHRImpl},\n  {provide: PLATFORM_DIRECTIVES, useValue: COMMON_DIRECTIVES, multi: true},\n  {provide: PLATFORM_PIPES, useValue: COMMON_PIPES, multi: true}\n];\n\n\nexport const CACHED_TEMPLATE_PROVIDER: Array<any /*Type | Provider | any[]*/> =\n    [{provide: XHR, useClass: CachedXHR}];\n\n\n\n/**\n * Bootstrapping for Angular applications.\n *\n * You instantiate an Angular application by explicitly specifying a component to use\n * as the root component for your application via the `bootstrap()` method.\n *\n * ## Simple Example\n *\n * Assuming this `index.html`:\n *\n * ```html\n * <html>\n *   <!-- load Angular script tags here. -->\n *   <body>\n *     <my-app>loading...</my-app>\n *   </body>\n * </html>\n * ```\n *\n * An application is bootstrapped inside an existing browser DOM, typically `index.html`.\n * Unlike Angular 1, Angular 2 does not compile/process providers in `index.html`. This is\n * mainly for security reasons, as well as architectural changes in Angular 2. This means\n * that `index.html` can safely be processed using server-side technologies such as\n * providers. Bindings can thus use double-curly `{{ syntax }}` without collision from\n * Angular 2 component double-curly `{{ syntax }}`.\n *\n * We can use this script code:\n *\n * {@example core/ts/bootstrap/bootstrap.ts region='bootstrap'}\n *\n * When the app developer invokes `bootstrap()` with the root component `MyApp` as its\n * argument, Angular performs the following tasks:\n *\n *  1. It uses the component's `selector` property to locate the DOM element which needs\n *     to be upgraded into the angular component.\n *  2. It creates a new child injector (from the platform injector). Optionally, you can\n *     also override the injector configuration for an app by invoking `bootstrap` with the\n *     `componentInjectableBindings` argument.\n *  3. It creates a new `Zone` and connects it to the angular application's change detection\n *     domain instance.\n *  4. It creates an emulated or shadow DOM on the selected component's host element and loads the\n *     template into it.\n *  5. It instantiates the specified component.\n *  6. Finally, Angular performs change detection to apply the initial data providers for the\n *     application.\n *\n *\n * ## Bootstrapping Multiple Applications\n *\n * When working within a browser window, there are many singleton resources: cookies, title,\n * location, and others. Angular services that represent these resources must likewise be\n * shared across all Angular applications that occupy the same browser window. For this\n * reason, Angular creates exactly one global platform object which stores all shared\n * services, and each angular application injector has the platform injector as its parent.\n *\n * Each application has its own private injector as well. When there are multiple\n * applications on a page, Angular treats each application injector's services as private\n * to that application.\n *\n * ## API\n *\n * - `appComponentType`: The root component which should act as the application. This is\n *   a reference to a `Type` which is annotated with `@Component(...)`.\n * - `customProviders`: An additional set of providers that can be added to the\n *   app injector to override default injection behavior.\n *\n * Returns a `Promise` of {@link ComponentRef}.\n */\nexport function bootstrap(\n    appComponentType: Type,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ComponentRef<any>> {\n  reflector.reflectionCapabilities = new ReflectionCapabilities();\n  let providers = [\n    BROWSER_APP_PROVIDERS, BROWSER_APP_COMPILER_PROVIDERS,\n    isPresent(customProviders) ? customProviders : []\n  ];\n  var appInjector = ReflectiveInjector.resolveAndCreate(providers, browserPlatform().injector);\n  return coreLoadAndBootstrap(appComponentType, appInjector);\n}\n\n\n/**\n * @experimental\n */\nexport function bootstrapWorkerUi(\n    workerScriptUri: string,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ApplicationRef> {\n  var app = ReflectiveInjector.resolveAndCreate(\n      [\n        WORKER_UI_APPLICATION_PROVIDERS, BROWSER_APP_COMPILER_PROVIDERS,\n        {provide: WORKER_SCRIPT, useValue: workerScriptUri},\n        isPresent(customProviders) ? customProviders : []\n      ],\n      workerUiPlatform().injector);\n  // Return a promise so that we keep the same semantics as Dart,\n  // and we might want to wait for the app side to come up\n  // in the future...\n  return PromiseWrapper.resolve(app.get(ApplicationRef));\n}\n\n\n/**\n * @experimental\n */\nconst WORKER_APP_COMPILER_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  COMPILER_PROVIDERS, {\n    provide: CompilerConfig,\n    useFactory: (platformDirectives: any[], platformPipes: any[]) => {\n      return new CompilerConfig({platformDirectives, platformPipes});\n    },\n    deps: [PLATFORM_DIRECTIVES, PLATFORM_PIPES]\n  },\n  {provide: XHR, useClass: XHRImpl},\n  {provide: PLATFORM_DIRECTIVES, useValue: COMMON_DIRECTIVES, multi: true},\n  {provide: PLATFORM_PIPES, useValue: COMMON_PIPES, multi: true}\n];\n\n\n/**\n * @experimental\n */\nexport function bootstrapWorkerApp(\n    appComponentType: Type,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ComponentRef<any>> {\n  var appInjector = ReflectiveInjector.resolveAndCreate(\n      [\n        WORKER_APP_APPLICATION_PROVIDERS, WORKER_APP_COMPILER_PROVIDERS,\n        isPresent(customProviders) ? customProviders : []\n      ],\n      workerAppPlatform().injector);\n  return coreLoadAndBootstrap(appComponentType, appInjector);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}