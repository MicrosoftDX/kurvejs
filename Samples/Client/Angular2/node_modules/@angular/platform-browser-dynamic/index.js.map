{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../modules/@angular/platform-browser-dynamic/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {COMMON_DIRECTIVES, COMMON_PIPES} from '@angular/common';\nimport {COMPILER_PROVIDERS, CompilerConfig, XHR} from '@angular/compiler';\nimport {ApplicationRef, ComponentRef, PLATFORM_DIRECTIVES, PLATFORM_PIPES, ReflectiveInjector, Type, coreLoadAndBootstrap} from '@angular/core';\nimport {BROWSER_APP_PROVIDERS, WORKER_APP_APPLICATION_PROVIDERS, WORKER_SCRIPT, WORKER_UI_APPLICATION_PROVIDERS, browserPlatform, workerAppPlatform, workerUiPlatform} from '@angular/platform-browser';\n\nimport {ReflectionCapabilities, reflector} from './core_private';\nimport {PromiseWrapper} from './src/facade/async';\nimport {isPresent} from './src/facade/lang';\nimport {CachedXHR} from './src/xhr/xhr_cache';\nimport {XHRImpl} from './src/xhr/xhr_impl';\n\n\nexport const BROWSER_APP_COMPILER_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  COMPILER_PROVIDERS, {\n    provide: CompilerConfig,\n    useFactory: (platformDirectives: any[], platformPipes: any[]) => {\n      return new CompilerConfig({platformDirectives, platformPipes});\n    },\n    deps: [PLATFORM_DIRECTIVES, PLATFORM_PIPES]\n  },\n  {provide: XHR, useClass: XHRImpl},\n  {provide: PLATFORM_DIRECTIVES, useValue: COMMON_DIRECTIVES, multi: true},\n  {provide: PLATFORM_PIPES, useValue: COMMON_PIPES, multi: true}\n];\n\n\nexport const CACHED_TEMPLATE_PROVIDER: Array<any /*Type | Provider | any[]*/> =\n    [{provide: XHR, useClass: CachedXHR}];\n\n\n\n/**\n * Bootstrapping for Angular applications.\n *\n * You instantiate an Angular application by explicitly specifying a component to use\n * as the root component for your application via the `bootstrap()` method.\n *\n * ## Simple Example\n *\n * Assuming this `index.html`:\n *\n * ```html\n * <html>\n *   <!-- load Angular script tags here. -->\n *   <body>\n *     <my-app>loading...</my-app>\n *   </body>\n * </html>\n * ```\n *\n * An application is bootstrapped inside an existing browser DOM, typically `index.html`.\n * Unlike Angular 1, Angular 2 does not compile/process providers in `index.html`. This is\n * mainly for security reasons, as well as architectural changes in Angular 2. This means\n * that `index.html` can safely be processed using server-side technologies such as\n * providers. Bindings can thus use double-curly `{{ syntax }}` without collision from\n * Angular 2 component double-curly `{{ syntax }}`.\n *\n * We can use this script code:\n *\n * {@example core/ts/bootstrap/bootstrap.ts region='bootstrap'}\n *\n * When the app developer invokes `bootstrap()` with the root component `MyApp` as its\n * argument, Angular performs the following tasks:\n *\n *  1. It uses the component's `selector` property to locate the DOM element which needs\n *     to be upgraded into the angular component.\n *  2. It creates a new child injector (from the platform injector). Optionally, you can\n *     also override the injector configuration for an app by invoking `bootstrap` with the\n *     `componentInjectableBindings` argument.\n *  3. It creates a new `Zone` and connects it to the angular application's change detection\n *     domain instance.\n *  4. It creates an emulated or shadow DOM on the selected component's host element and loads the\n *     template into it.\n *  5. It instantiates the specified component.\n *  6. Finally, Angular performs change detection to apply the initial data providers for the\n *     application.\n *\n *\n * ## Bootstrapping Multiple Applications\n *\n * When working within a browser window, there are many singleton resources: cookies, title,\n * location, and others. Angular services that represent these resources must likewise be\n * shared across all Angular applications that occupy the same browser window. For this\n * reason, Angular creates exactly one global platform object which stores all shared\n * services, and each angular application injector has the platform injector as its parent.\n *\n * Each application has its own private injector as well. When there are multiple\n * applications on a page, Angular treats each application injector's services as private\n * to that application.\n *\n * ## API\n *\n * - `appComponentType`: The root component which should act as the application. This is\n *   a reference to a `Type` which is annotated with `@Component(...)`.\n * - `customProviders`: An additional set of providers that can be added to the\n *   app injector to override default injection behavior.\n *\n * Returns a `Promise` of {@link ComponentRef}.\n */\nexport function bootstrap(\n    appComponentType: Type,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ComponentRef<any>> {\n  reflector.reflectionCapabilities = new ReflectionCapabilities();\n  let providers = [\n    BROWSER_APP_PROVIDERS, BROWSER_APP_COMPILER_PROVIDERS,\n    isPresent(customProviders) ? customProviders : []\n  ];\n  var appInjector = ReflectiveInjector.resolveAndCreate(providers, browserPlatform().injector);\n  return coreLoadAndBootstrap(appComponentType, appInjector);\n}\n\n\n/**\n * @experimental\n */\nexport function bootstrapWorkerUi(\n    workerScriptUri: string,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ApplicationRef> {\n  var app = ReflectiveInjector.resolveAndCreate(\n      [\n        WORKER_UI_APPLICATION_PROVIDERS, BROWSER_APP_COMPILER_PROVIDERS,\n        {provide: WORKER_SCRIPT, useValue: workerScriptUri},\n        isPresent(customProviders) ? customProviders : []\n      ],\n      workerUiPlatform().injector);\n  // Return a promise so that we keep the same semantics as Dart,\n  // and we might want to wait for the app side to come up\n  // in the future...\n  return PromiseWrapper.resolve(app.get(ApplicationRef));\n}\n\n\n/**\n * @experimental\n */\nconst WORKER_APP_COMPILER_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  COMPILER_PROVIDERS, {\n    provide: CompilerConfig,\n    useFactory: (platformDirectives: any[], platformPipes: any[]) => {\n      return new CompilerConfig({platformDirectives, platformPipes});\n    },\n    deps: [PLATFORM_DIRECTIVES, PLATFORM_PIPES]\n  },\n  {provide: XHR, useClass: XHRImpl},\n  {provide: PLATFORM_DIRECTIVES, useValue: COMMON_DIRECTIVES, multi: true},\n  {provide: PLATFORM_PIPES, useValue: COMMON_PIPES, multi: true}\n];\n\n\n/**\n * @experimental\n */\nexport function bootstrapWorkerApp(\n    appComponentType: Type,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ComponentRef<any>> {\n  var appInjector = ReflectiveInjector.resolveAndCreate(\n      [\n        WORKER_APP_APPLICATION_PROVIDERS, WORKER_APP_COMPILER_PROVIDERS,\n        isPresent(customProviders) ? customProviders : []\n      ],\n      workerAppPlatform().injector);\n  return coreLoadAndBootstrap(appComponentType, appInjector);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}