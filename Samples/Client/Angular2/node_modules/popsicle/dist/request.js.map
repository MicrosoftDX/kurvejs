{"version":3,"file":"request.js","sourceRoot":"","sources":["../lib/request.ts"],"names":[],"mappings":"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","sourcesContent":["import arrify = require('arrify')\nimport extend = require('xtend')\nimport Promise = require('any-promise')\nimport { compose } from 'throwback'\nimport Base, { BaseOptions, Headers } from './base'\nimport Response, { ResponseOptions } from './response'\nimport PopsicleError from './error'\n\nexport interface DefaultsOptions extends BaseOptions {\n  url?: string\n  method?: string\n  timeout?: number\n  body?: any\n  options?: any\n  use?: Middleware[]\n  progress?: ProgressFunction[]\n  transport?: TransportOptions\n}\n\nexport interface RequestOptions extends DefaultsOptions {\n  url: string\n}\n\nexport interface RequestJSON {\n  url: string\n  headers: Headers\n  body: any\n  timeout: number\n  options: any\n  method: string\n}\n\nexport interface TransportOptions {\n  open: OpenHandler\n  abort?: AbortHandler\n  use?: Middleware[]\n}\n\nexport type Middleware = (request: Request, next: () => Promise<Response>) => Response | Promise<Response>\nexport type ProgressFunction = (request: Request) => any\n\nexport type OpenHandler = (request: Request) => Promise<ResponseOptions>\nexport type AbortHandler = (request: Request) => any\n\nexport default class Request extends Base implements Promise<Response> {\n  method: string\n  timeout: number\n  body: any\n  options: any\n  transport: TransportOptions\n  middleware: Middleware[] = []\n\n  opened = false\n  aborted = false\n  uploadLength: number = null\n  downloadLength: number = null\n  private _uploadedBytes: number = null\n  private _downloadedBytes: number = null\n\n  _raw: any\n  _progress: ProgressFunction[] = []\n\n  private _promise: Promise<Response>\n  private _resolve: (response: Response) => void\n  private _reject: (error: Error) => void\n\n  constructor (options: RequestOptions) {\n    super(options)\n\n    this.timeout = (options.timeout | 0)\n    this.method = (options.method || 'GET').toUpperCase()\n    this.body = options.body\n    this.options = extend(options.options)\n\n    // Internal promise representation.\n    const promised = new Promise((resolve, reject) => {\n      this._resolve = resolve\n      this._reject = reject\n    })\n\n    // External promise representation, resolves _after_ middleware.\n    this._promise = new Promise((resolve) => {\n      process.nextTick(() => {\n        const handle = compose(this.middleware)\n\n        const cb = () => {\n          this._handle()\n          return promised\n        }\n\n        return resolve(handle(this, cb))\n      })\n    })\n\n    // Extend to avoid mutations of the transport object.\n    this.transport = extend(options.transport)\n\n    // Automatically `use` default middleware functions.\n    this.use(options.use || this.transport.use)\n    this.progress(options.progress)\n  }\n\n  error (message: string, code: string, original?: Error): PopsicleError {\n    return new PopsicleError(message, code, original, this)\n  }\n\n  then (onFulfilled: (response?: Response) => any, onRejected?: (error?: PopsicleError) => any) {\n    return this._promise.then(onFulfilled, onRejected)\n  }\n\n  catch (onRejected: (error?: PopsicleError) => any) {\n    return this._promise.then(null, onRejected)\n  }\n\n  exec (cb: (err: PopsicleError, response?: Response) => any) {\n    this.then(function (response) {\n      cb(null, response)\n    }, cb)\n  }\n\n  toOptions (): RequestOptions {\n    return {\n      url: this.url,\n      method: this.method,\n      options: this.options,\n      body: this.body,\n      transport: this.transport,\n      timeout: this.timeout,\n      rawHeaders: this.rawHeaders,\n      use: this.middleware,\n      progress: this._progress\n    }\n  }\n\n  toJSON (): RequestJSON {\n    return {\n      url: this.url,\n      headers: this.headers,\n      body: this.body,\n      options: this.options,\n      timeout: this.timeout,\n      method: this.method\n    }\n  }\n\n  clone () {\n    return new Request(this.toOptions())\n  }\n\n  use (fns: Middleware | Middleware[]) {\n    for (const fn of arrify(fns)) {\n      this.middleware.push(fn)\n    }\n\n    return this\n  }\n\n  progress (fns: ProgressFunction | ProgressFunction[]) {\n    for (const fn of arrify(fns)) {\n      this._progress.push(fn)\n    }\n\n    return this\n  }\n\n  abort () {\n    if (this.completed === 1 || this.aborted) {\n      return\n    }\n\n    // Abort the current handler.\n    this.aborted = true\n    this._reject(this.error('Request aborted', 'EABORT'))\n\n    // Sometimes it's just not possible to abort.\n    if (this.opened) {\n      // Emit a final progress event.\n      this._emit()\n\n      if (this.transport.abort) {\n        this.transport.abort(this)\n      }\n    }\n\n    return this\n  }\n\n  private _emit () {\n    const fns = this._progress\n\n    try {\n      for (let fn of fns) {\n        fn(this)\n      }\n    } catch (err) {\n      this._reject(err)\n      this.abort()\n    }\n  }\n\n  private _handle () {\n    const { timeout, url } = this\n    let timer: any\n\n    // Skip handling when already aborted.\n    if (this.aborted) {\n      return\n    }\n\n    this.opened = true\n\n    // Catch URLs that will cause the request to hang indefinitely in\n    // CORS disabled environments. E.g. Atom Editor.\n    if (/^https?\\:\\/*(?:[~#\\\\\\?;\\:]|$)/.test(url)) {\n      this._reject(this.error(`Refused to connect to invalid URL \"${url}\"`, 'EINVALID'))\n      return\n    }\n\n    // Enable transportation layer timeout.\n    if (timeout > 0) {\n      timer = setTimeout(() => {\n        this._reject(this.error(`Timeout of ${timeout}ms exceeded`, 'ETIMEOUT'))\n        this.abort()\n      }, timeout)\n    }\n\n    // Proxy the transport promise into the current request.\n    return this.transport.open(this)\n      .then(\n        res => this._resolve(new Response(res)),\n        err => this._reject(err)\n      )\n  }\n\n  get uploaded () {\n    return this.uploadLength ? this.uploadedBytes / this.uploadLength : 0\n  }\n\n  get downloaded () {\n    return this.downloadLength ? this.downloadedBytes / this.downloadLength : 0\n  }\n\n  get completed () {\n    return (this.uploaded + this.downloaded) / 2\n  }\n\n  get completedBytes () {\n    return this.uploadedBytes + this.downloadedBytes\n  }\n\n  get totalBytes () {\n    return this.uploadLength + this.downloadLength\n  }\n\n  get uploadedBytes () {\n    return this._uploadedBytes\n  }\n\n  set uploadedBytes (bytes: number) {\n    if (bytes !== this._uploadedBytes) {\n      this._uploadedBytes = bytes\n      this._emit()\n    }\n  }\n\n  get downloadedBytes () {\n    return this._downloadedBytes\n  }\n\n  set downloadedBytes (bytes: number) {\n    if (bytes !== this._downloadedBytes) {\n      this._downloadedBytes = bytes\n      this._emit()\n    }\n  }\n\n}\n"]}