{"version":3,"file":"index.js","sourceRoot":"","sources":["../lib/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { request as httpRequest, IncomingMessage } from 'http'\nimport { request as httpsRequest } from 'https'\nimport { PassThrough } from 'stream'\nimport urlLib = require('url')\nimport extend = require('xtend')\nimport arrify = require('arrify')\nimport { Cookie } from 'tough-cookie'\nimport Promise = require('any-promise')\nimport { Headers } from './base'\nimport Request from './request'\nimport Response from './response'\nimport { defaults as use } from './plugins/index'\n\n/**\n * Export default instance with node transportation layer.\n */\nexport { open, abort, use }\n\n/**\n * Redirection types to handle.\n */\nenum REDIRECT_TYPE {\n  FOLLOW_WITH_GET,\n  FOLLOW_WITH_CONFIRMATION\n}\n\n/**\n * Possible redirection status codes.\n */\nconst REDIRECT_STATUS: { [status: number]: number } = {\n  '300': REDIRECT_TYPE.FOLLOW_WITH_GET,\n  '301': REDIRECT_TYPE.FOLLOW_WITH_GET,\n  '302': REDIRECT_TYPE.FOLLOW_WITH_GET,\n  '303': REDIRECT_TYPE.FOLLOW_WITH_GET,\n  '305': REDIRECT_TYPE.FOLLOW_WITH_GET,\n  '307': REDIRECT_TYPE.FOLLOW_WITH_CONFIRMATION,\n  '308': REDIRECT_TYPE.FOLLOW_WITH_CONFIRMATION\n}\n\n/**\n * Open a HTTP request with node.\n */\nfunction open (request: Request) {\n  const { url, method, body, options } = request\n  const maxRedirects = num(options.maxRedirects, 5)\n  const followRedirects = options.followRedirects !== false\n  let requestCount = 0\n  let isStreaming = false\n\n  const confirmRedirect = typeof options.followRedirects === 'function' ?\n    options.followRedirects : falsey\n\n  /**\n   * Create the HTTP request, in a way we can re-use this.\n   */\n  function get (url: string, method: string, body?: any) {\n    // Check redirection count before executing request.\n    if (requestCount++ > maxRedirects) {\n      return Promise.reject(\n        request.error(`Exceeded maximum of ${maxRedirects} redirects`, 'EMAXREDIRECTS')\n      )\n    }\n\n    return appendCookies(request)\n      .then(function () {\n        return new Promise((resolve, reject) => {\n          const arg: any = urlLib.parse(url)\n          const isHttp = arg.protocol !== 'https:'\n          const engine: typeof httpRequest = isHttp ? httpRequest : httpsRequest\n\n          // Attach request options.\n          arg.method = method\n          arg.headers = request.toHeaders()\n          arg.agent = options.agent\n          arg.rejectUnauthorized = options.rejectUnauthorized !== false\n          arg.ca = options.ca\n          arg.cert = options.cert\n          arg.key = options.key\n\n          const rawRequest = engine(arg)\n\n          // Track upload/download progress through a stream.\n          const requestStream = new PassThrough()\n          const responseStream = new PassThrough()\n\n          requestStream.on('data', function (chunk: Buffer) {\n            request.uploadedBytes += chunk.length\n          })\n\n          requestStream.on('end', function () {\n            request.uploadedBytes = request.uploadLength\n          })\n\n          responseStream.on('data', function (chunk: Buffer) {\n            request.downloadedBytes += chunk.length\n          })\n\n          responseStream.on('end', function () {\n            request.downloadedBytes = request.downloadLength\n          })\n\n          // Handle the HTTP response.\n          function response (rawResponse: IncomingMessage) {\n            const status = rawResponse.statusCode\n            const redirect = REDIRECT_STATUS[status]\n\n            // Handle HTTP redirects.\n            if (followRedirects && redirect != null && rawResponse.headers.location) {\n              const newUrl = urlLib.resolve(url, rawResponse.headers.location)\n\n              // Ignore the result of the response on redirect.\n              rawResponse.resume()\n\n              // Kill the old cookies on redirect.\n              request.remove('Cookie')\n\n              if (redirect === REDIRECT_TYPE.FOLLOW_WITH_GET) {\n                // Update the \"Content-Length\" for updated redirection body.\n                request.set('Content-Length', '0')\n\n                return get(newUrl, 'GET')\n              }\n\n              if (redirect === REDIRECT_TYPE.FOLLOW_WITH_CONFIRMATION) {\n                // Following HTTP spec by automatically redirecting with GET/HEAD.\n                if (arg.method === 'GET' || arg.method === 'HEAD') {\n                  return get(newUrl, method, body)\n                }\n\n                // Allow the user to confirm redirect according to HTTP spec.\n                if (confirmRedirect(rawRequest, rawResponse)) {\n                  return get(newUrl, method, body)\n                }\n              }\n            }\n\n            request.downloadLength = num(rawResponse.headers['content-length'], 0)\n\n            isStreaming = true\n            rawResponse.pipe(responseStream)\n\n            return Promise.resolve({\n              body: responseStream,\n              status: status,\n              statusText: rawResponse.statusMessage,\n              headers: rawResponse.headers,\n              rawHeaders: rawResponse.rawHeaders,\n              url: url\n            })\n          }\n\n          // Emit a request error.\n          function emitError (error: Error) {\n            // Abort request on error.\n            rawRequest.abort()\n\n            // Forward errors.\n            if (isStreaming) {\n              responseStream.emit('error', error)\n            } else {\n              reject(error)\n            }\n          }\n\n          rawRequest.once('response', function (message: IncomingMessage) {\n            resolve(setCookies(request, message).then(() => response(message)))\n          })\n\n          rawRequest.once('error', function (error: Error) {\n            emitError(request.error(`Unable to connect to \"${url}\"`, 'EUNAVAILABLE', error))\n          })\n\n          rawRequest.once('clientAborted', function () {\n            emitError(request.error('Request aborted', 'EABORT'))\n          })\n\n          request._raw = rawRequest\n          request.uploadLength = num(rawRequest.getHeader('content-length'), 0)\n          requestStream.pipe(rawRequest)\n          requestStream.once('error', emitError)\n\n          // Pipe the body to the stream.\n          if (body) {\n            if (typeof body.pipe === 'function') {\n              body.pipe(requestStream)\n              body.once('error', emitError)\n            } else {\n              requestStream.end(body)\n            }\n          } else {\n            requestStream.end()\n          }\n        })\n      })\n  }\n\n  return get(url, method, body)\n}\n\n/**\n * Close the current HTTP request.\n */\nfunction abort (request: Request) {\n  request._raw.emit('clientAborted')\n  request._raw.abort()\n}\n\n/**\n * Parse a value into a number.\n */\nfunction num (value: any, fallback?: number) {\n  if (value == null) {\n    return fallback\n  }\n\n  return isNaN(value) ? fallback : Number(value)\n}\n\n/**\n * Used to check redirection support.\n */\nfunction falsey () {\n  return false\n}\n\n\n/**\n * Read cookies from the cookie jar.\n */\nfunction appendCookies (request: Request) {\n  return new Promise(function (resolve, reject) {\n    if (!request.options.jar) {\n      return resolve()\n    }\n\n    request.options.jar.getCookies(request.url, function (err: Error, cookies: Cookie[]) {\n      if (err) {\n        return reject(err)\n      }\n\n      if (cookies.length) {\n        request.append('Cookie', cookies.join('; '))\n      }\n\n      return resolve()\n    })\n  })\n}\n\n/**\n * Put cookies in the cookie jar.\n */\nfunction setCookies (request: Request, message: IncomingMessage) {\n  return new Promise(function (resolve, reject) {\n    if (!request.options.jar) {\n      return resolve()\n    }\n\n    const cookies = arrify(message.headers['set-cookie'])\n\n    if (!cookies.length) {\n      return resolve()\n    }\n\n    const setCookies = cookies.map(function (cookie) {\n      return new Promise(function (resolve, reject) {\n        request.options.jar.setCookie(cookie, request.url, function (err: Error) {\n          return err ? reject(err) : resolve()\n        })\n      })\n    })\n\n    return resolve(Promise.all(setCookies))\n  })\n}\n"]}