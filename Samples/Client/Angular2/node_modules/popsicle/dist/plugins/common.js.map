{"version":3,"file":"common.js","sourceRoot":"","sources":["../../lib/plugins/common.ts"],"names":[],"mappings":"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","sourcesContent":["import Promise = require('any-promise')\nimport FormData = require('form-data')\nimport { stringify as stringifyQuery, parse as parseQuery } from 'querystring'\nimport isHostObject from './is-host/index'\nimport Request from '../request'\nimport Response from '../response'\nimport form from '../form'\n\nconst JSON_MIME_REGEXP = /^application\\/(?:[\\w!#\\$%&\\*`\\-\\.\\^~]*\\+)?json$/i\nconst QUERY_MIME_REGEXP = /^application\\/x-www-form-urlencoded$/i\nconst FORM_MIME_REGEXP = /^multipart\\/form-data$/i\n\n/**\n * Simply wrap a value and return it.\n */\nexport function wrap <T> (value: T): () => T {\n  return () => value\n}\n\n/**\n * Remove default headers.\n */\nexport const headers = wrap(function (request: Request, next: () => Promise<Response>) {\n  // If we have no accept header set already, default to accepting\n  // everything. This is needed because otherwise Firefox defaults to\n  // an accept header of `html/xml`.\n  if (!request.get('Accept')) {\n    request.set('Accept', '*/*')\n  }\n\n  // Remove headers that should never be set by the user.\n  request.remove('Host')\n\n  return next()\n})\n\n/**\n * Stringify the request body.\n */\nexport const stringify = wrap(function (request: Request, next: () => Promise<Response>) {\n  const { body } = request\n\n  // Convert primitives types into strings.\n  if (Object(body) !== body) {\n    request.body = body == null ? null : String(body)\n\n    return next()\n  }\n\n  if (isHostObject(body)) {\n    return next()\n  }\n\n  let type = request.type()\n\n  // Set the default mime type to be JSON if none exists.\n  if (!type) {\n    type = 'application/json'\n\n    request.type(type)\n  }\n\n  // Automatically stringify expected MIME types.\n  try {\n    if (JSON_MIME_REGEXP.test(type)) {\n      request.body = JSON.stringify(body)\n    } else if (FORM_MIME_REGEXP.test(type)) {\n      request.body = form(body)\n    } else if (QUERY_MIME_REGEXP.test(type)) {\n      request.body = stringifyQuery(body)\n    }\n  } catch (err) {\n    return Promise.reject(request.error('Unable to stringify request body: ' + err.message, 'ESTRINGIFY', err))\n  }\n\n  // Remove the `Content-Type` header from form data requests. Browsers\n  // will only fill it automatically with the boundary when it isn't set.\n  if (request.body instanceof FormData) {\n    request.remove('Content-Type')\n  }\n\n  return next()\n})\n\n/**\n * Automatic stringification and parsing middleware.\n */\nexport const parse = wrap(function (request: Request, next: () => Promise<Response>) {\n  return next()\n    .then(function (response) {\n      const { body } = response\n\n      if (typeof body !== 'string') {\n        return response\n      }\n\n      if (body === '') {\n        response.body = null\n\n        return response\n      }\n\n      const type = response.type()\n\n      try {\n        if (JSON_MIME_REGEXP.test(type)) {\n          response.body = body === '' ? null : JSON.parse(body)\n        } else if (QUERY_MIME_REGEXP.test(type)) {\n          response.body = parseQuery(body)\n        }\n      } catch (err) {\n        return Promise.reject(request.error('Unable to parse response body: ' + err.message, 'EPARSE', err))\n      }\n\n      return response\n    })\n})\n"]}