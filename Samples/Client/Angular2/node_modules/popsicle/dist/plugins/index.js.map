{"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/plugins/index.ts"],"names":[],"mappings":"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","sourcesContent":["import concat = require('concat-stream')\nimport FormData = require('form-data')\nimport { createUnzip } from 'zlib'\nimport Promise = require('any-promise')\nexport * from './common'\nimport { wrap, headers as commonHeaders, parse, stringify } from './common'\nimport Request, { Middleware } from '../request'\nimport Response from '../response'\n\n/**\n * Support gzipped responses.\n */\nexport const unzip = wrap(function (request: Request, next: () => Promise<Response>) {\n  if (!request.get('Accept-Encoding')) {\n    request.set('Accept-Encoding', 'gzip,deflate')\n  }\n\n  return next()\n    .then(function (response) {\n      const enc = response.get('Content-Encoding')\n\n      if (enc === 'gzip' || enc === 'deflate') {\n        const unzip = createUnzip()\n        response.body.pipe(unzip)\n        response.body = unzip\n      }\n\n      return response\n    })\n})\n\n/**\n * The body is normally a stream in node, this turns it into a string for browser\n * compatibility (and honestly just making it easier to use).\n */\nexport function concatStream (encoding: string) {\n  return function (request: Request, next: () => Promise<Response>) {\n    return next()\n      .then(function (response) {\n        return new Promise(function (resolve, reject) {\n          const stream = concat({ encoding }, function (data: any) {\n            // Update the response `body` to the concat output.\n            response.body = data\n            return resolve(response)\n          })\n\n          response.body.on('error', reject)\n          response.body.pipe(stream)\n        })\n      })\n  }\n}\n\n/**\n * Fill default headers with requests (automatic \"Content-Length\" and \"User-Agent\").\n */\nexport function headers () {\n  const common = commonHeaders()\n\n  return function (request: Request, next: () => Promise<Response>) {\n    // Set up common headers.\n    return common(request, function () {\n      // Specify a default user agent in node.\n      if (!request.get('User-Agent')) {\n        request.set('User-Agent', 'https://github.com/blakeembrey/popsicle')\n      }\n\n      // Manually set the `Content-Length` and `Content-Type` headers from the\n      // form data object because we need to handle boundaries and streams.\n      if (request.body instanceof FormData) {\n        request.set('Content-Type', 'multipart/form-data; boundary=' + request.body.getBoundary())\n\n        // Asynchronously compute the content length.\n        return new Promise(function (resolve, reject) {\n          request.body.getLength(function (err: Error, length: number) {\n            if (err) {\n              request.set('Transfer-Encoding', 'chunked')\n            } else {\n              request.set('Content-Length', String(length))\n            }\n\n            return resolve(next())\n          })\n        })\n      }\n\n      let length = 0\n      const body = request.body\n\n      // Attempt to manually compute the content length.\n      if (body && !request.get('Content-Length')) {\n        if (Array.isArray(body)) {\n          for (let i = 0; i < body.length; i++) {\n            length += body[i].length\n          }\n        } else if (typeof body === 'string') {\n          length = Buffer.byteLength(body)\n        } else {\n          length = body.length\n        }\n\n        if (length) {\n          request.set('Content-Length', String(length))\n        } else if (typeof body.pipe === 'function') {\n          request.set('Transfer-Encoding', 'chunked')\n        } else {\n          return Promise.reject(request.error('Argument error, `options.body`', 'EBODY'))\n        }\n      }\n\n      return next()\n    })\n  }\n}\n\nexport const defaults: Middleware[] = [stringify(), headers(), parse(), concatStream('string'), unzip()]\n"]}