{"version":3,"file":"browser.js","sourceRoot":"","sources":["../lib/browser.ts"],"names":[],"mappings":"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","sourcesContent":["import Promise = require('any-promise')\nimport { RawHeaders } from './base'\nimport Request from './request'\nimport Response from './response'\nimport { defaults as use } from './plugins/index'\n\n/**\n * Export default instance with browser transportation layer.\n */\nexport { open, abort, use }\n\nfunction open (request: Request) {\n  return new Promise(function (resolve, reject) {\n    const { url, method } = request\n    const responseType = request.options.responseType\n\n    // Loading HTTP resources from HTTPS is restricted and uncatchable.\n    if (window.location.protocol === 'https:' && /^http\\:/.test(url)) {\n      return reject(request.error(`The request to \"${url}\" was blocked`, 'EBLOCKED'))\n    }\n\n    const xhr = request._raw = new XMLHttpRequest()\n\n    xhr.onload = function () {\n      return resolve({\n        status: xhr.status === 1223 ? 204 : xhr.status,\n        statusText: xhr.statusText,\n        rawHeaders: parseToRawHeaders(xhr.getAllResponseHeaders()),\n        body: responseType ? xhr.response : xhr.responseText,\n        url: xhr.responseURL\n      })\n    }\n\n    xhr.onabort = function () {\n      return reject(request.error('Request aborted', 'EABORT'))\n    }\n\n    xhr.onerror = function () {\n      return reject(request.error(`Unable to connect to \"${request.url}\"`, 'EUNAVAILABLE'))\n    }\n\n    // Use `progress` events to avoid calculating byte length.\n    xhr.onprogress = function (e: ProgressEvent) {\n      if (e.lengthComputable) {\n        request.downloadLength = e.total\n      }\n\n      request.downloadedBytes = e.loaded\n    }\n\n    // No upload will occur with these requests.\n    if (method === 'GET' || method === 'HEAD' || !xhr.upload) {\n      request.uploadLength = 0\n      request.uploadedBytes = 0\n    } else {\n      xhr.upload.onprogress = function (e: ProgressEvent) {\n        if (e.lengthComputable) {\n          request.uploadLength = e.total\n        }\n\n        request.uploadedBytes = e.loaded\n      }\n    }\n\n    // XHR can fail to open when site CSP is set.\n    try {\n      xhr.open(method, url)\n    } catch (e) {\n      return reject(request.error(`Refused to connect to \"${url}\"`, 'ECSP', e))\n    }\n\n    // Send cookies with CORS.\n    if (request.options.withCredentials) {\n      xhr.withCredentials = true\n    }\n\n    if (responseType) {\n      try {\n        xhr.responseType = responseType\n      } finally {\n        if (xhr.responseType !== responseType) {\n          throw request.error(`Unsupported response type: ${responseType}`, 'ERESPONSETYPE')\n        }\n      }\n    }\n\n    for (let i = 0; i < request.rawHeaders.length; i += 2) {\n      xhr.setRequestHeader(request.rawHeaders[i], request.rawHeaders[i + 1])\n    }\n\n    xhr.send(request.body)\n  })\n}\n\n/**\n * Close the current HTTP request.\n */\nfunction abort (request: Request) {\n  request._raw.abort()\n}\n\n/**\n * Parse a headers string into an array of raw headers.\n */\nfunction parseToRawHeaders (headers: string): RawHeaders {\n  const rawHeaders: RawHeaders = []\n  const lines = headers.replace(/\\r?\\n$/, '').split(/\\r?\\n/)\n\n  for (const header of lines) {\n    const indexOf = header.indexOf(':')\n    const name = header.substr(0, indexOf).trim()\n    const value = header.substr(indexOf + 1).trim()\n\n    rawHeaders.push(name, value)\n  }\n\n  return rawHeaders\n}\n"]}